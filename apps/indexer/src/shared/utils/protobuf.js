"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uint8arrayToString = exports.decodeMsg = void 0;
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const tx_1 = require("cosmjs-types/cosmos/slashing/v1beta1/tx");
const v1beta1 = __importStar(require("@akashnetwork/akash-api/v1beta1"));
const v1beta2 = __importStar(require("@akashnetwork/akash-api/v1beta2"));
const v1beta3 = __importStar(require("@akashnetwork/akash-api/v1beta3"));
const v1beta4 = __importStar(require("@akashnetwork/akash-api/v1beta4"));
const akashTypes = [
    ...Object.values(v1beta1),
    ...Object.values(v1beta2),
    ...Object.values(v1beta3),
    ...Object.values(v1beta4)
].map((x) => ["/" + x.$type, x]);
const missingTypes = [["/cosmos.slashing.v1beta1.MsgUnjail", tx_1.MsgUnjail]];
function decodeMsg(type, msg) {
    const myRegistry = new proto_signing_1.Registry([...stargate_1.defaultRegistryTypes, ...akashTypes, ...missingTypes]);
    const msgType = myRegistry.lookupType(type);
    if (!msgType) {
        throw new Error("Type not found: " + type);
    }
    if (!(0, proto_signing_1.isTsProtoGeneratedType)(msgType)) {
        throw new Error("Type is not generated by ts-protobuf: " + type);
    }
    return msgType.decode(msg);
}
exports.decodeMsg = decodeMsg;
function uint8arrayToString(arr) {
    return new TextDecoder().decode(arr);
}
exports.uint8arrayToString = uint8arrayToString;
//# sourceMappingURL=protobuf.js.map