diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/bid.d.ts b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/bid.d.ts
new file mode 100644
index 0000000..bb7cb70
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/bid.d.ts
@@ -0,0 +1,1624 @@
+import Long from "long";
+import { Resources } from "../../base/v1beta3/resources";
+import { OrderID } from "./order";
+import { DecCoin, Coin } from "../../../cosmos/base/v1beta1/coin";
+import * as _m0 from "protobufjs/minimal";
+export declare const protobufPackage = "akash.market.v1beta4";
+/**
+ * ResourceOffer describes resources that provider is offering
+ * for deployment
+ */
+export interface ResourceOffer {
+    $type: "akash.market.v1beta4.ResourceOffer";
+    resources: Resources | undefined;
+    count: number;
+}
+/** MsgCreateBid defines an SDK message for creating Bid */
+export interface MsgCreateBid {
+    $type: "akash.market.v1beta4.MsgCreateBid";
+    order: OrderID | undefined;
+    provider: string;
+    price: DecCoin | undefined;
+    deposit: Coin | undefined;
+    resourcesOffer: ResourceOffer[];
+}
+/** MsgCreateBidResponse defines the Msg/CreateBid response type. */
+export interface MsgCreateBidResponse {
+    $type: "akash.market.v1beta4.MsgCreateBidResponse";
+}
+/** MsgCloseBid defines an SDK message for closing bid */
+export interface MsgCloseBid {
+    $type: "akash.market.v1beta4.MsgCloseBid";
+    bidId: BidID | undefined;
+}
+/** MsgCloseBidResponse defines the Msg/CloseBid response type. */
+export interface MsgCloseBidResponse {
+    $type: "akash.market.v1beta4.MsgCloseBidResponse";
+}
+/**
+ * BidID stores owner and all other seq numbers
+ * A successful bid becomes a Lease(ID).
+ */
+export interface BidID {
+    $type: "akash.market.v1beta4.BidID";
+    owner: string;
+    dseq: Long;
+    gseq: number;
+    oseq: number;
+    provider: string;
+}
+/** Bid stores BidID, state of bid and price */
+export interface Bid {
+    $type: "akash.market.v1beta4.Bid";
+    bidId: BidID | undefined;
+    state: Bid_State;
+    price: DecCoin | undefined;
+    createdAt: Long;
+    resourcesOffer: ResourceOffer[];
+}
+/** State is an enum which refers to state of bid */
+export declare enum Bid_State {
+    /** invalid - Prefix should start with 0 in enum. So declaring dummy state */
+    invalid = 0,
+    /** open - BidOpen denotes state for bid open */
+    open = 1,
+    /** active - BidMatched denotes state for bid open */
+    active = 2,
+    /** lost - BidLost denotes state for bid lost */
+    lost = 3,
+    /** closed - BidClosed denotes state for bid closed */
+    closed = 4,
+    UNRECOGNIZED = -1
+}
+export declare function bid_StateFromJSON(object: any): Bid_State;
+export declare function bid_StateToJSON(object: Bid_State): string;
+/** BidFilters defines flags for bid list filter */
+export interface BidFilters {
+    $type: "akash.market.v1beta4.BidFilters";
+    owner: string;
+    dseq: Long;
+    gseq: number;
+    oseq: number;
+    provider: string;
+    state: string;
+}
+export declare const ResourceOffer: {
+    $type: "akash.market.v1beta4.ResourceOffer";
+    encode(message: ResourceOffer, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): ResourceOffer;
+    fromJSON(object: any): ResourceOffer;
+    toJSON(message: ResourceOffer): unknown;
+    fromPartial<I extends {
+        resources?: {
+            storage?: {
+                name?: string | undefined;
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            }[] | undefined;
+            cpu?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                units?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } | undefined;
+            memory?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } | undefined;
+            id?: number | undefined;
+            endpoints?: {
+                kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                sequenceNumber?: number | undefined;
+            }[] | undefined;
+            gpu?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                units?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } | undefined;
+        } | undefined;
+        count?: number | undefined;
+    } & {
+        resources?: ({
+            storage?: {
+                name?: string | undefined;
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            }[] | undefined;
+            cpu?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                units?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } | undefined;
+            memory?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } | undefined;
+            id?: number | undefined;
+            endpoints?: {
+                kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                sequenceNumber?: number | undefined;
+            }[] | undefined;
+            gpu?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                units?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } | undefined;
+        } & {
+            storage?: ({
+                name?: string | undefined;
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            }[] & ({
+                name?: string | undefined;
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } & {
+                name?: string | undefined;
+                attributes?: ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] & ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & Record<Exclude<keyof I["resources"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resources"]["storage"][number]["attributes"], "$type" | keyof {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[]>, never>) | undefined;
+                quantity?: ({
+                    val?: Uint8Array | undefined;
+                } & {
+                    val?: Uint8Array | undefined;
+                } & Record<Exclude<keyof I["resources"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+            } & Record<Exclude<keyof I["resources"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["resources"]["storage"], "$type" | keyof {
+                name?: string | undefined;
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            }[]>, never>) | undefined;
+            cpu?: ({
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                units?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } & {
+                attributes?: ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] & ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & Record<Exclude<keyof I["resources"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resources"]["cpu"]["attributes"], "$type" | keyof {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[]>, never>) | undefined;
+                units?: ({
+                    val?: Uint8Array | undefined;
+                } & {
+                    val?: Uint8Array | undefined;
+                } & Record<Exclude<keyof I["resources"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+            } & Record<Exclude<keyof I["resources"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+            memory?: ({
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                quantity?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } & {
+                attributes?: ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] & ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & Record<Exclude<keyof I["resources"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resources"]["memory"]["attributes"], "$type" | keyof {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[]>, never>) | undefined;
+                quantity?: ({
+                    val?: Uint8Array | undefined;
+                } & {
+                    val?: Uint8Array | undefined;
+                } & Record<Exclude<keyof I["resources"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+            } & Record<Exclude<keyof I["resources"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+            id?: number | undefined;
+            endpoints?: ({
+                kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                sequenceNumber?: number | undefined;
+            }[] & ({
+                kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                sequenceNumber?: number | undefined;
+            } & {
+                kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                sequenceNumber?: number | undefined;
+            } & Record<Exclude<keyof I["resources"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["resources"]["endpoints"], "$type" | keyof {
+                kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                sequenceNumber?: number | undefined;
+            }[]>, never>) | undefined;
+            gpu?: ({
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                units?: {
+                    val?: Uint8Array | undefined;
+                } | undefined;
+            } & {
+                attributes?: ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] & ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & Record<Exclude<keyof I["resources"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resources"]["gpu"]["attributes"], "$type" | keyof {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[]>, never>) | undefined;
+                units?: ({
+                    val?: Uint8Array | undefined;
+                } & {
+                    val?: Uint8Array | undefined;
+                } & Record<Exclude<keyof I["resources"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+            } & Record<Exclude<keyof I["resources"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+        } & Record<Exclude<keyof I["resources"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+        count?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "resources" | "count">, never>>(object: I): ResourceOffer;
+};
+export declare const MsgCreateBid: {
+    $type: "akash.market.v1beta4.MsgCreateBid";
+    encode(message: MsgCreateBid, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateBid;
+    fromJSON(object: any): MsgCreateBid;
+    toJSON(message: MsgCreateBid): unknown;
+    fromPartial<I extends {
+        deposit?: {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } | undefined;
+        price?: {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } | undefined;
+        order?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+        provider?: string | undefined;
+        resourcesOffer?: {
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        }[] | undefined;
+    } & {
+        deposit?: ({
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & Record<Exclude<keyof I["deposit"], "$type" | "denom" | "amount">, never>) | undefined;
+        price?: ({
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & Record<Exclude<keyof I["price"], "$type" | "denom" | "amount">, never>) | undefined;
+        order?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["order"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["order"], "$type" | "owner" | "dseq" | "gseq" | "oseq">, never>) | undefined;
+        provider?: string | undefined;
+        resourcesOffer?: ({
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        }[] & ({
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        } & {
+            resources?: ({
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } & {
+                storage?: ({
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] & ({
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    name?: string | undefined;
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    quantity?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"], "$type" | keyof {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[]>, never>) | undefined;
+                cpu?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    units?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                memory?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    quantity?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                id?: number | undefined;
+                endpoints?: ({
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] & ({
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                } & {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["endpoints"], "$type" | keyof {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[]>, never>) | undefined;
+                gpu?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    units?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+            } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+            count?: number | undefined;
+        } & Record<Exclude<keyof I["resourcesOffer"][number], "$type" | "resources" | "count">, never>)[] & Record<Exclude<keyof I["resourcesOffer"], "$type" | keyof {
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        }[]>, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "deposit" | "price" | "order" | "provider" | "resourcesOffer">, never>>(object: I): MsgCreateBid;
+};
+export declare const MsgCreateBidResponse: {
+    $type: "akash.market.v1beta4.MsgCreateBidResponse";
+    encode(_: MsgCreateBidResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateBidResponse;
+    fromJSON(_: any): MsgCreateBidResponse;
+    toJSON(_: MsgCreateBidResponse): unknown;
+    fromPartial<I extends {} & {} & Record<Exclude<keyof I, "$type">, never>>(_: I): MsgCreateBidResponse;
+};
+export declare const MsgCloseBid: {
+    $type: "akash.market.v1beta4.MsgCloseBid";
+    encode(message: MsgCloseBid, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseBid;
+    fromJSON(object: any): MsgCloseBid;
+    toJSON(message: MsgCloseBid): unknown;
+    fromPartial<I extends {
+        bidId?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        bidId?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["bidId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["bidId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "bidId">, never>>(object: I): MsgCloseBid;
+};
+export declare const MsgCloseBidResponse: {
+    $type: "akash.market.v1beta4.MsgCloseBidResponse";
+    encode(_: MsgCloseBidResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseBidResponse;
+    fromJSON(_: any): MsgCloseBidResponse;
+    toJSON(_: MsgCloseBidResponse): unknown;
+    fromPartial<I extends {} & {} & Record<Exclude<keyof I, "$type">, never>>(_: I): MsgCloseBidResponse;
+};
+export declare const BidID: {
+    $type: "akash.market.v1beta4.BidID";
+    encode(message: BidID, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): BidID;
+    fromJSON(object: any): BidID;
+    toJSON(message: BidID): unknown;
+    fromPartial<I extends {
+        owner?: string | undefined;
+        dseq?: string | number | Long.Long | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & {
+        owner?: string | undefined;
+        dseq?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>>(object: I): BidID;
+};
+export declare const Bid: {
+    $type: "akash.market.v1beta4.Bid";
+    encode(message: Bid, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): Bid;
+    fromJSON(object: any): Bid;
+    toJSON(message: Bid): unknown;
+    fromPartial<I extends {
+        state?: Bid_State | undefined;
+        createdAt?: string | number | Long.Long | undefined;
+        price?: {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } | undefined;
+        bidId?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+        resourcesOffer?: {
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        }[] | undefined;
+    } & {
+        state?: Bid_State | undefined;
+        createdAt?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+        price?: ({
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & Record<Exclude<keyof I["price"], "$type" | "denom" | "amount">, never>) | undefined;
+        bidId?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["bidId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["bidId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+        resourcesOffer?: ({
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        }[] & ({
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        } & {
+            resources?: ({
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } & {
+                storage?: ({
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] & ({
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    name?: string | undefined;
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    quantity?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["storage"], "$type" | keyof {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[]>, never>) | undefined;
+                cpu?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    units?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                memory?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    quantity?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                id?: number | undefined;
+                endpoints?: ({
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] & ({
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                } & {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["endpoints"], "$type" | keyof {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[]>, never>) | undefined;
+                gpu?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    units?: ({
+                        val?: Uint8Array | undefined;
+                    } & {
+                        val?: Uint8Array | undefined;
+                    } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+            } & Record<Exclude<keyof I["resourcesOffer"][number]["resources"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+            count?: number | undefined;
+        } & Record<Exclude<keyof I["resourcesOffer"][number], "$type" | "resources" | "count">, never>)[] & Record<Exclude<keyof I["resourcesOffer"], "$type" | keyof {
+            resources?: {
+                storage?: {
+                    name?: string | undefined;
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                }[] | undefined;
+                cpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                memory?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    quantity?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+                id?: number | undefined;
+                endpoints?: {
+                    kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                    sequenceNumber?: number | undefined;
+                }[] | undefined;
+                gpu?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    units?: {
+                        val?: Uint8Array | undefined;
+                    } | undefined;
+                } | undefined;
+            } | undefined;
+            count?: number | undefined;
+        }[]>, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "state" | "createdAt" | "price" | "bidId" | "resourcesOffer">, never>>(object: I): Bid;
+};
+export declare const BidFilters: {
+    $type: "akash.market.v1beta4.BidFilters";
+    encode(message: BidFilters, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): BidFilters;
+    fromJSON(object: any): BidFilters;
+    toJSON(message: BidFilters): unknown;
+    fromPartial<I extends {
+        owner?: string | undefined;
+        state?: string | undefined;
+        dseq?: string | number | Long.Long | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & {
+        owner?: string | undefined;
+        state?: string | undefined;
+        dseq?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "owner" | "state" | "dseq" | "gseq" | "provider" | "oseq">, never>>(object: I): BidFilters;
+};
+declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
+export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
+    [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]>;
+} : Partial<T>;
+declare type KeysOfUnion<T> = T extends T ? keyof T : never;
+export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
+    [K in keyof P]: Exact<P[K], I[K]>;
+} & Record<Exclude<keyof I, KeysOfUnion<P> | "$type">, never>;
+export {};
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/bid.js b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/bid.js
new file mode 100644
index 0000000..ff20009
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/bid.js
@@ -0,0 +1,712 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.BidFilters = exports.Bid = exports.BidID = exports.MsgCloseBidResponse = exports.MsgCloseBid = exports.MsgCreateBidResponse = exports.MsgCreateBid = exports.ResourceOffer = exports.bid_StateToJSON = exports.bid_StateFromJSON = exports.Bid_State = exports.protobufPackage = void 0;
+/* eslint-disable */
+const typeRegistry_1 = require("../../../typeRegistry");
+const long_1 = __importDefault(require("long"));
+const resources_1 = require("../../base/v1beta3/resources");
+const order_1 = require("./order");
+const coin_1 = require("../../../cosmos/base/v1beta1/coin");
+const _m0 = __importStar(require("protobufjs/minimal"));
+exports.protobufPackage = "akash.market.v1beta4";
+/** State is an enum which refers to state of bid */
+var Bid_State;
+(function (Bid_State) {
+    /** invalid - Prefix should start with 0 in enum. So declaring dummy state */
+    Bid_State[Bid_State["invalid"] = 0] = "invalid";
+    /** open - BidOpen denotes state for bid open */
+    Bid_State[Bid_State["open"] = 1] = "open";
+    /** active - BidMatched denotes state for bid open */
+    Bid_State[Bid_State["active"] = 2] = "active";
+    /** lost - BidLost denotes state for bid lost */
+    Bid_State[Bid_State["lost"] = 3] = "lost";
+    /** closed - BidClosed denotes state for bid closed */
+    Bid_State[Bid_State["closed"] = 4] = "closed";
+    Bid_State[Bid_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
+})(Bid_State = exports.Bid_State || (exports.Bid_State = {}));
+function bid_StateFromJSON(object) {
+    switch (object) {
+        case 0:
+        case "invalid":
+            return Bid_State.invalid;
+        case 1:
+        case "open":
+            return Bid_State.open;
+        case 2:
+        case "active":
+            return Bid_State.active;
+        case 3:
+        case "lost":
+            return Bid_State.lost;
+        case 4:
+        case "closed":
+            return Bid_State.closed;
+        case -1:
+        case "UNRECOGNIZED":
+        default:
+            return Bid_State.UNRECOGNIZED;
+    }
+}
+exports.bid_StateFromJSON = bid_StateFromJSON;
+function bid_StateToJSON(object) {
+    switch (object) {
+        case Bid_State.invalid:
+            return "invalid";
+        case Bid_State.open:
+            return "open";
+        case Bid_State.active:
+            return "active";
+        case Bid_State.lost:
+            return "lost";
+        case Bid_State.closed:
+            return "closed";
+        case Bid_State.UNRECOGNIZED:
+        default:
+            return "UNRECOGNIZED";
+    }
+}
+exports.bid_StateToJSON = bid_StateToJSON;
+function createBaseResourceOffer() {
+    return {
+        $type: "akash.market.v1beta4.ResourceOffer",
+        resources: undefined,
+        count: 0,
+    };
+}
+exports.ResourceOffer = {
+    $type: "akash.market.v1beta4.ResourceOffer",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.resources !== undefined) {
+            resources_1.Resources.encode(message.resources, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.count !== 0) {
+            writer.uint32(16).uint32(message.count);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseResourceOffer();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.resources = resources_1.Resources.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.count = reader.uint32();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.ResourceOffer.$type,
+            resources: isSet(object.resources)
+                ? resources_1.Resources.fromJSON(object.resources)
+                : undefined,
+            count: isSet(object.count) ? Number(object.count) : 0,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.resources !== undefined &&
+            (obj.resources = message.resources
+                ? resources_1.Resources.toJSON(message.resources)
+                : undefined);
+        message.count !== undefined && (obj.count = Math.round(message.count));
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseResourceOffer();
+        message.resources =
+            object.resources !== undefined && object.resources !== null
+                ? resources_1.Resources.fromPartial(object.resources)
+                : undefined;
+        message.count = object.count ?? 0;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.ResourceOffer.$type, exports.ResourceOffer);
+function createBaseMsgCreateBid() {
+    return {
+        $type: "akash.market.v1beta4.MsgCreateBid",
+        order: undefined,
+        provider: "",
+        price: undefined,
+        deposit: undefined,
+        resourcesOffer: [],
+    };
+}
+exports.MsgCreateBid = {
+    $type: "akash.market.v1beta4.MsgCreateBid",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.order !== undefined) {
+            order_1.OrderID.encode(message.order, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.provider !== "") {
+            writer.uint32(18).string(message.provider);
+        }
+        if (message.price !== undefined) {
+            coin_1.DecCoin.encode(message.price, writer.uint32(26).fork()).ldelim();
+        }
+        if (message.deposit !== undefined) {
+            coin_1.Coin.encode(message.deposit, writer.uint32(34).fork()).ldelim();
+        }
+        for (const v of message.resourcesOffer) {
+            exports.ResourceOffer.encode(v, writer.uint32(42).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCreateBid();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.order = order_1.OrderID.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.provider = reader.string();
+                    break;
+                case 3:
+                    message.price = coin_1.DecCoin.decode(reader, reader.uint32());
+                    break;
+                case 4:
+                    message.deposit = coin_1.Coin.decode(reader, reader.uint32());
+                    break;
+                case 5:
+                    message.resourcesOffer.push(exports.ResourceOffer.decode(reader, reader.uint32()));
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.MsgCreateBid.$type,
+            order: isSet(object.order) ? order_1.OrderID.fromJSON(object.order) : undefined,
+            provider: isSet(object.provider) ? String(object.provider) : "",
+            price: isSet(object.price) ? coin_1.DecCoin.fromJSON(object.price) : undefined,
+            deposit: isSet(object.deposit)
+                ? coin_1.Coin.fromJSON(object.deposit)
+                : undefined,
+            resourcesOffer: Array.isArray(object?.resourcesOffer)
+                ? object.resourcesOffer.map((e) => exports.ResourceOffer.fromJSON(e))
+                : [],
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.order !== undefined &&
+            (obj.order = message.order ? order_1.OrderID.toJSON(message.order) : undefined);
+        message.provider !== undefined && (obj.provider = message.provider);
+        message.price !== undefined &&
+            (obj.price = message.price ? coin_1.DecCoin.toJSON(message.price) : undefined);
+        message.deposit !== undefined &&
+            (obj.deposit = message.deposit
+                ? coin_1.Coin.toJSON(message.deposit)
+                : undefined);
+        if (message.resourcesOffer) {
+            obj.resourcesOffer = message.resourcesOffer.map((e) => e ? exports.ResourceOffer.toJSON(e) : undefined);
+        }
+        else {
+            obj.resourcesOffer = [];
+        }
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseMsgCreateBid();
+        message.order =
+            object.order !== undefined && object.order !== null
+                ? order_1.OrderID.fromPartial(object.order)
+                : undefined;
+        message.provider = object.provider ?? "";
+        message.price =
+            object.price !== undefined && object.price !== null
+                ? coin_1.DecCoin.fromPartial(object.price)
+                : undefined;
+        message.deposit =
+            object.deposit !== undefined && object.deposit !== null
+                ? coin_1.Coin.fromPartial(object.deposit)
+                : undefined;
+        message.resourcesOffer =
+            object.resourcesOffer?.map((e) => exports.ResourceOffer.fromPartial(e)) || [];
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCreateBid.$type, exports.MsgCreateBid);
+function createBaseMsgCreateBidResponse() {
+    return { $type: "akash.market.v1beta4.MsgCreateBidResponse" };
+}
+exports.MsgCreateBidResponse = {
+    $type: "akash.market.v1beta4.MsgCreateBidResponse",
+    encode(_, writer = _m0.Writer.create()) {
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCreateBidResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(_) {
+        return {
+            $type: exports.MsgCreateBidResponse.$type,
+        };
+    },
+    toJSON(_) {
+        const obj = {};
+        return obj;
+    },
+    fromPartial(_) {
+        const message = createBaseMsgCreateBidResponse();
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCreateBidResponse.$type, exports.MsgCreateBidResponse);
+function createBaseMsgCloseBid() {
+    return { $type: "akash.market.v1beta4.MsgCloseBid", bidId: undefined };
+}
+exports.MsgCloseBid = {
+    $type: "akash.market.v1beta4.MsgCloseBid",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.bidId !== undefined) {
+            exports.BidID.encode(message.bidId, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCloseBid();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.bidId = exports.BidID.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.MsgCloseBid.$type,
+            bidId: isSet(object.bidId) ? exports.BidID.fromJSON(object.bidId) : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.bidId !== undefined &&
+            (obj.bidId = message.bidId ? exports.BidID.toJSON(message.bidId) : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseMsgCloseBid();
+        message.bidId =
+            object.bidId !== undefined && object.bidId !== null
+                ? exports.BidID.fromPartial(object.bidId)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCloseBid.$type, exports.MsgCloseBid);
+function createBaseMsgCloseBidResponse() {
+    return { $type: "akash.market.v1beta4.MsgCloseBidResponse" };
+}
+exports.MsgCloseBidResponse = {
+    $type: "akash.market.v1beta4.MsgCloseBidResponse",
+    encode(_, writer = _m0.Writer.create()) {
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCloseBidResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(_) {
+        return {
+            $type: exports.MsgCloseBidResponse.$type,
+        };
+    },
+    toJSON(_) {
+        const obj = {};
+        return obj;
+    },
+    fromPartial(_) {
+        const message = createBaseMsgCloseBidResponse();
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCloseBidResponse.$type, exports.MsgCloseBidResponse);
+function createBaseBidID() {
+    return {
+        $type: "akash.market.v1beta4.BidID",
+        owner: "",
+        dseq: long_1.default.UZERO,
+        gseq: 0,
+        oseq: 0,
+        provider: "",
+    };
+}
+exports.BidID = {
+    $type: "akash.market.v1beta4.BidID",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.owner !== "") {
+            writer.uint32(10).string(message.owner);
+        }
+        if (!message.dseq.isZero()) {
+            writer.uint32(16).uint64(message.dseq);
+        }
+        if (message.gseq !== 0) {
+            writer.uint32(24).uint32(message.gseq);
+        }
+        if (message.oseq !== 0) {
+            writer.uint32(32).uint32(message.oseq);
+        }
+        if (message.provider !== "") {
+            writer.uint32(42).string(message.provider);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseBidID();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.owner = reader.string();
+                    break;
+                case 2:
+                    message.dseq = reader.uint64();
+                    break;
+                case 3:
+                    message.gseq = reader.uint32();
+                    break;
+                case 4:
+                    message.oseq = reader.uint32();
+                    break;
+                case 5:
+                    message.provider = reader.string();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.BidID.$type,
+            owner: isSet(object.owner) ? String(object.owner) : "",
+            dseq: isSet(object.dseq) ? long_1.default.fromValue(object.dseq) : long_1.default.UZERO,
+            gseq: isSet(object.gseq) ? Number(object.gseq) : 0,
+            oseq: isSet(object.oseq) ? Number(object.oseq) : 0,
+            provider: isSet(object.provider) ? String(object.provider) : "",
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.owner !== undefined && (obj.owner = message.owner);
+        message.dseq !== undefined &&
+            (obj.dseq = (message.dseq || long_1.default.UZERO).toString());
+        message.gseq !== undefined && (obj.gseq = Math.round(message.gseq));
+        message.oseq !== undefined && (obj.oseq = Math.round(message.oseq));
+        message.provider !== undefined && (obj.provider = message.provider);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseBidID();
+        message.owner = object.owner ?? "";
+        message.dseq =
+            object.dseq !== undefined && object.dseq !== null
+                ? long_1.default.fromValue(object.dseq)
+                : long_1.default.UZERO;
+        message.gseq = object.gseq ?? 0;
+        message.oseq = object.oseq ?? 0;
+        message.provider = object.provider ?? "";
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.BidID.$type, exports.BidID);
+function createBaseBid() {
+    return {
+        $type: "akash.market.v1beta4.Bid",
+        bidId: undefined,
+        state: 0,
+        price: undefined,
+        createdAt: long_1.default.ZERO,
+        resourcesOffer: [],
+    };
+}
+exports.Bid = {
+    $type: "akash.market.v1beta4.Bid",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.bidId !== undefined) {
+            exports.BidID.encode(message.bidId, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.state !== 0) {
+            writer.uint32(16).int32(message.state);
+        }
+        if (message.price !== undefined) {
+            coin_1.DecCoin.encode(message.price, writer.uint32(26).fork()).ldelim();
+        }
+        if (!message.createdAt.isZero()) {
+            writer.uint32(32).int64(message.createdAt);
+        }
+        for (const v of message.resourcesOffer) {
+            exports.ResourceOffer.encode(v, writer.uint32(42).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseBid();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.bidId = exports.BidID.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.state = reader.int32();
+                    break;
+                case 3:
+                    message.price = coin_1.DecCoin.decode(reader, reader.uint32());
+                    break;
+                case 4:
+                    message.createdAt = reader.int64();
+                    break;
+                case 5:
+                    message.resourcesOffer.push(exports.ResourceOffer.decode(reader, reader.uint32()));
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.Bid.$type,
+            bidId: isSet(object.bidId) ? exports.BidID.fromJSON(object.bidId) : undefined,
+            state: isSet(object.state) ? bid_StateFromJSON(object.state) : 0,
+            price: isSet(object.price) ? coin_1.DecCoin.fromJSON(object.price) : undefined,
+            createdAt: isSet(object.createdAt)
+                ? long_1.default.fromValue(object.createdAt)
+                : long_1.default.ZERO,
+            resourcesOffer: Array.isArray(object?.resourcesOffer)
+                ? object.resourcesOffer.map((e) => exports.ResourceOffer.fromJSON(e))
+                : [],
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.bidId !== undefined &&
+            (obj.bidId = message.bidId ? exports.BidID.toJSON(message.bidId) : undefined);
+        message.state !== undefined && (obj.state = bid_StateToJSON(message.state));
+        message.price !== undefined &&
+            (obj.price = message.price ? coin_1.DecCoin.toJSON(message.price) : undefined);
+        message.createdAt !== undefined &&
+            (obj.createdAt = (message.createdAt || long_1.default.ZERO).toString());
+        if (message.resourcesOffer) {
+            obj.resourcesOffer = message.resourcesOffer.map((e) => e ? exports.ResourceOffer.toJSON(e) : undefined);
+        }
+        else {
+            obj.resourcesOffer = [];
+        }
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseBid();
+        message.bidId =
+            object.bidId !== undefined && object.bidId !== null
+                ? exports.BidID.fromPartial(object.bidId)
+                : undefined;
+        message.state = object.state ?? 0;
+        message.price =
+            object.price !== undefined && object.price !== null
+                ? coin_1.DecCoin.fromPartial(object.price)
+                : undefined;
+        message.createdAt =
+            object.createdAt !== undefined && object.createdAt !== null
+                ? long_1.default.fromValue(object.createdAt)
+                : long_1.default.ZERO;
+        message.resourcesOffer =
+            object.resourcesOffer?.map((e) => exports.ResourceOffer.fromPartial(e)) || [];
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.Bid.$type, exports.Bid);
+function createBaseBidFilters() {
+    return {
+        $type: "akash.market.v1beta4.BidFilters",
+        owner: "",
+        dseq: long_1.default.UZERO,
+        gseq: 0,
+        oseq: 0,
+        provider: "",
+        state: "",
+    };
+}
+exports.BidFilters = {
+    $type: "akash.market.v1beta4.BidFilters",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.owner !== "") {
+            writer.uint32(10).string(message.owner);
+        }
+        if (!message.dseq.isZero()) {
+            writer.uint32(16).uint64(message.dseq);
+        }
+        if (message.gseq !== 0) {
+            writer.uint32(24).uint32(message.gseq);
+        }
+        if (message.oseq !== 0) {
+            writer.uint32(32).uint32(message.oseq);
+        }
+        if (message.provider !== "") {
+            writer.uint32(42).string(message.provider);
+        }
+        if (message.state !== "") {
+            writer.uint32(50).string(message.state);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseBidFilters();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.owner = reader.string();
+                    break;
+                case 2:
+                    message.dseq = reader.uint64();
+                    break;
+                case 3:
+                    message.gseq = reader.uint32();
+                    break;
+                case 4:
+                    message.oseq = reader.uint32();
+                    break;
+                case 5:
+                    message.provider = reader.string();
+                    break;
+                case 6:
+                    message.state = reader.string();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.BidFilters.$type,
+            owner: isSet(object.owner) ? String(object.owner) : "",
+            dseq: isSet(object.dseq) ? long_1.default.fromValue(object.dseq) : long_1.default.UZERO,
+            gseq: isSet(object.gseq) ? Number(object.gseq) : 0,
+            oseq: isSet(object.oseq) ? Number(object.oseq) : 0,
+            provider: isSet(object.provider) ? String(object.provider) : "",
+            state: isSet(object.state) ? String(object.state) : "",
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.owner !== undefined && (obj.owner = message.owner);
+        message.dseq !== undefined &&
+            (obj.dseq = (message.dseq || long_1.default.UZERO).toString());
+        message.gseq !== undefined && (obj.gseq = Math.round(message.gseq));
+        message.oseq !== undefined && (obj.oseq = Math.round(message.oseq));
+        message.provider !== undefined && (obj.provider = message.provider);
+        message.state !== undefined && (obj.state = message.state);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseBidFilters();
+        message.owner = object.owner ?? "";
+        message.dseq =
+            object.dseq !== undefined && object.dseq !== null
+                ? long_1.default.fromValue(object.dseq)
+                : long_1.default.UZERO;
+        message.gseq = object.gseq ?? 0;
+        message.oseq = object.oseq ?? 0;
+        message.provider = object.provider ?? "";
+        message.state = object.state ?? "";
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.BidFilters.$type, exports.BidFilters);
+if (_m0.util.Long !== long_1.default) {
+    _m0.util.Long = long_1.default;
+    _m0.configure();
+}
+function isSet(value) {
+    return value !== null && value !== undefined;
+}
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/genesis.d.ts b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/genesis.d.ts
new file mode 100644
index 0000000..91ad6fe
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/genesis.d.ts
@@ -0,0 +1,1899 @@
+import Long from "long";
+import { Params } from "./params";
+import { Order } from "./order";
+import { Lease } from "./lease";
+import { Bid } from "./bid";
+import * as _m0 from "protobufjs/minimal";
+export declare const protobufPackage = "akash.market.v1beta4";
+/** GenesisState defines the basic genesis state used by market module */
+export interface GenesisState {
+    $type: "akash.market.v1beta4.GenesisState";
+    params: Params | undefined;
+    orders: Order[];
+    leases: Lease[];
+    bids: Bid[];
+}
+export declare const GenesisState: {
+    $type: "akash.market.v1beta4.GenesisState";
+    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
+    fromJSON(object: any): GenesisState;
+    toJSON(message: GenesisState): unknown;
+    fromPartial<I extends {
+        params?: {
+            bidMinDeposit?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            orderMaxBids?: number | undefined;
+        } | undefined;
+        orders?: {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[] | undefined;
+        leases?: {
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            leaseId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            closedOn?: string | number | Long.Long | undefined;
+        }[] | undefined;
+        bids?: {
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            bidId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            resourcesOffer?: {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] | undefined;
+        }[] | undefined;
+    } & {
+        params?: ({
+            bidMinDeposit?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            orderMaxBids?: number | undefined;
+        } & {
+            bidMinDeposit?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["params"]["bidMinDeposit"], "$type" | "denom" | "amount">, never>) | undefined;
+            orderMaxBids?: number | undefined;
+        } & Record<Exclude<keyof I["params"], "$type" | "bidMinDeposit" | "orderMaxBids">, never>) | undefined;
+        orders?: ({
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[] & ({
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        } & {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["orders"][number]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            orderId?: ({
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } & {
+                owner?: string | undefined;
+                dseq?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["orders"][number]["orderId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } & Record<Exclude<keyof I["orders"][number]["orderId"], "$type" | "owner" | "dseq" | "gseq" | "oseq">, never>) | undefined;
+            spec?: ({
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } & {
+                name?: string | undefined;
+                requirements?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    signedBy?: ({
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } & {
+                        allOf?: (string[] & string[] & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["signedBy"]["allOf"], "$type" | keyof string[]>, never>) | undefined;
+                        anyOf?: (string[] & string[] & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["signedBy"]["anyOf"], "$type" | keyof string[]>, never>) | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["signedBy"], "$type" | "allOf" | "anyOf">, never>) | undefined;
+                } & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"], "$type" | "attributes" | "signedBy">, never>) | undefined;
+                resources?: ({
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] & ({
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                } & {
+                    count?: number | undefined;
+                    price?: ({
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } & {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+                    resource?: ({
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } & {
+                        storage?: ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] & ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            name?: string | undefined;
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"], "$type" | keyof {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[]>, never>) | undefined;
+                        cpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                        memory?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                        id?: number | undefined;
+                        endpoints?: ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] & ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["endpoints"], "$type" | keyof {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[]>, never>) | undefined;
+                        gpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+                } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number], "$type" | "count" | "price" | "resource">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"], "$type" | keyof {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[]>, never>) | undefined;
+            } & Record<Exclude<keyof I["orders"][number]["spec"], "$type" | "name" | "requirements" | "resources">, never>) | undefined;
+        } & Record<Exclude<keyof I["orders"][number], "$type" | "state" | "createdAt" | "orderId" | "spec">, never>)[] & Record<Exclude<keyof I["orders"], "$type" | keyof {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[]>, never>) | undefined;
+        leases?: ({
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            leaseId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            closedOn?: string | number | Long.Long | undefined;
+        }[] & ({
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            leaseId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            closedOn?: string | number | Long.Long | undefined;
+        } & {
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["leases"][number]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            price?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["leases"][number]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+            leaseId?: ({
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & {
+                owner?: string | undefined;
+                dseq?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["leases"][number]["leaseId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & Record<Exclude<keyof I["leases"][number]["leaseId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+            closedOn?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["leases"][number]["closedOn"], "$type" | keyof Long.Long>, never>) | undefined;
+        } & Record<Exclude<keyof I["leases"][number], "$type" | "state" | "createdAt" | "price" | "leaseId" | "closedOn">, never>)[] & Record<Exclude<keyof I["leases"], "$type" | keyof {
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            leaseId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            closedOn?: string | number | Long.Long | undefined;
+        }[]>, never>) | undefined;
+        bids?: ({
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            bidId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            resourcesOffer?: {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] | undefined;
+        }[] & ({
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            bidId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            resourcesOffer?: {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] | undefined;
+        } & {
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["bids"][number]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            price?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["bids"][number]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+            bidId?: ({
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & {
+                owner?: string | undefined;
+                dseq?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["bids"][number]["bidId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & Record<Exclude<keyof I["bids"][number]["bidId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+            resourcesOffer?: ({
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] & ({
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            } & {
+                resources?: ({
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } & {
+                    storage?: ({
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] & ({
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        name?: string | undefined;
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["storage"][number]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        quantity?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["storage"], "$type" | keyof {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[]>, never>) | undefined;
+                    cpu?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["cpu"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        units?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                    memory?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["memory"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        quantity?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                    id?: number | undefined;
+                    endpoints?: ({
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] & ({
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    } & {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["endpoints"], "$type" | keyof {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[]>, never>) | undefined;
+                    gpu?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["gpu"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        units?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number]["resources"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+                count?: number | undefined;
+            } & Record<Exclude<keyof I["bids"][number]["resourcesOffer"][number], "$type" | "resources" | "count">, never>)[] & Record<Exclude<keyof I["bids"][number]["resourcesOffer"], "$type" | keyof {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[]>, never>) | undefined;
+        } & Record<Exclude<keyof I["bids"][number], "$type" | "state" | "createdAt" | "price" | "bidId" | "resourcesOffer">, never>)[] & Record<Exclude<keyof I["bids"], "$type" | keyof {
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            bidId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            resourcesOffer?: {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] | undefined;
+        }[]>, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "params" | "orders" | "leases" | "bids">, never>>(object: I): GenesisState;
+};
+declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
+export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
+    [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]>;
+} : Partial<T>;
+declare type KeysOfUnion<T> = T extends T ? keyof T : never;
+export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
+    [K in keyof P]: Exact<P[K], I[K]>;
+} & Record<Exclude<keyof I, KeysOfUnion<P> | "$type">, never>;
+export {};
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/genesis.js b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/genesis.js
new file mode 100644
index 0000000..73bd6f5
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/genesis.js
@@ -0,0 +1,149 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.GenesisState = exports.protobufPackage = void 0;
+/* eslint-disable */
+const typeRegistry_1 = require("../../../typeRegistry");
+const long_1 = __importDefault(require("long"));
+const params_1 = require("./params");
+const order_1 = require("./order");
+const lease_1 = require("./lease");
+const bid_1 = require("./bid");
+const _m0 = __importStar(require("protobufjs/minimal"));
+exports.protobufPackage = "akash.market.v1beta4";
+function createBaseGenesisState() {
+    return {
+        $type: "akash.market.v1beta4.GenesisState",
+        params: undefined,
+        orders: [],
+        leases: [],
+        bids: [],
+    };
+}
+exports.GenesisState = {
+    $type: "akash.market.v1beta4.GenesisState",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.params !== undefined) {
+            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
+        }
+        for (const v of message.orders) {
+            order_1.Order.encode(v, writer.uint32(18).fork()).ldelim();
+        }
+        for (const v of message.leases) {
+            lease_1.Lease.encode(v, writer.uint32(26).fork()).ldelim();
+        }
+        for (const v of message.bids) {
+            bid_1.Bid.encode(v, writer.uint32(34).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseGenesisState();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.params = params_1.Params.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.orders.push(order_1.Order.decode(reader, reader.uint32()));
+                    break;
+                case 3:
+                    message.leases.push(lease_1.Lease.decode(reader, reader.uint32()));
+                    break;
+                case 4:
+                    message.bids.push(bid_1.Bid.decode(reader, reader.uint32()));
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.GenesisState.$type,
+            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
+            orders: Array.isArray(object?.orders)
+                ? object.orders.map((e) => order_1.Order.fromJSON(e))
+                : [],
+            leases: Array.isArray(object?.leases)
+                ? object.leases.map((e) => lease_1.Lease.fromJSON(e))
+                : [],
+            bids: Array.isArray(object?.bids)
+                ? object.bids.map((e) => bid_1.Bid.fromJSON(e))
+                : [],
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.params !== undefined &&
+            (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
+        if (message.orders) {
+            obj.orders = message.orders.map((e) => (e ? order_1.Order.toJSON(e) : undefined));
+        }
+        else {
+            obj.orders = [];
+        }
+        if (message.leases) {
+            obj.leases = message.leases.map((e) => (e ? lease_1.Lease.toJSON(e) : undefined));
+        }
+        else {
+            obj.leases = [];
+        }
+        if (message.bids) {
+            obj.bids = message.bids.map((e) => (e ? bid_1.Bid.toJSON(e) : undefined));
+        }
+        else {
+            obj.bids = [];
+        }
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseGenesisState();
+        message.params =
+            object.params !== undefined && object.params !== null
+                ? params_1.Params.fromPartial(object.params)
+                : undefined;
+        message.orders = object.orders?.map((e) => order_1.Order.fromPartial(e)) || [];
+        message.leases = object.leases?.map((e) => lease_1.Lease.fromPartial(e)) || [];
+        message.bids = object.bids?.map((e) => bid_1.Bid.fromPartial(e)) || [];
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.GenesisState.$type, exports.GenesisState);
+if (_m0.util.Long !== long_1.default) {
+    _m0.util.Long = long_1.default;
+    _m0.configure();
+}
+function isSet(value) {
+    return value !== null && value !== undefined;
+}
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/lease.d.ts b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/lease.d.ts
new file mode 100644
index 0000000..6f8ae29
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/lease.d.ts
@@ -0,0 +1,742 @@
+import Long from "long";
+import { DecCoin } from "../../../cosmos/base/v1beta1/coin";
+import { BidID } from "./bid";
+import * as _m0 from "protobufjs/minimal";
+export declare const protobufPackage = "akash.market.v1beta4";
+/** LeaseID stores bid details of lease */
+export interface LeaseID {
+    $type: "akash.market.v1beta4.LeaseID";
+    owner: string;
+    dseq: Long;
+    gseq: number;
+    oseq: number;
+    provider: string;
+}
+/** Lease stores LeaseID, state of lease and price */
+export interface Lease {
+    $type: "akash.market.v1beta4.Lease";
+    leaseId: LeaseID | undefined;
+    state: Lease_State;
+    price: DecCoin | undefined;
+    createdAt: Long;
+    closedOn: Long;
+}
+/** State is an enum which refers to state of lease */
+export declare enum Lease_State {
+    /** invalid - Prefix should start with 0 in enum. So declaring dummy state */
+    invalid = 0,
+    /** active - LeaseActive denotes state for lease active */
+    active = 1,
+    /** insufficient_funds - LeaseInsufficientFunds denotes state for lease insufficient_funds */
+    insufficient_funds = 2,
+    /** closed - LeaseClosed denotes state for lease closed */
+    closed = 3,
+    UNRECOGNIZED = -1
+}
+export declare function lease_StateFromJSON(object: any): Lease_State;
+export declare function lease_StateToJSON(object: Lease_State): string;
+/** LeaseFilters defines flags for lease list filter */
+export interface LeaseFilters {
+    $type: "akash.market.v1beta4.LeaseFilters";
+    owner: string;
+    dseq: Long;
+    gseq: number;
+    oseq: number;
+    provider: string;
+    state: string;
+}
+/** MsgCreateLease is sent to create a lease */
+export interface MsgCreateLease {
+    $type: "akash.market.v1beta4.MsgCreateLease";
+    bidId: BidID | undefined;
+}
+/** MsgCreateLeaseResponse is the response from creating a lease */
+export interface MsgCreateLeaseResponse {
+    $type: "akash.market.v1beta4.MsgCreateLeaseResponse";
+}
+/** MsgWithdrawLease defines an SDK message for closing bid */
+export interface MsgWithdrawLease {
+    $type: "akash.market.v1beta4.MsgWithdrawLease";
+    bidId: LeaseID | undefined;
+}
+/** MsgWithdrawLeaseResponse defines the Msg/WithdrawLease response type. */
+export interface MsgWithdrawLeaseResponse {
+    $type: "akash.market.v1beta4.MsgWithdrawLeaseResponse";
+}
+/** MsgCloseLease defines an SDK message for closing order */
+export interface MsgCloseLease {
+    $type: "akash.market.v1beta4.MsgCloseLease";
+    leaseId: LeaseID | undefined;
+}
+/** MsgCloseLeaseResponse defines the Msg/CloseLease response type. */
+export interface MsgCloseLeaseResponse {
+    $type: "akash.market.v1beta4.MsgCloseLeaseResponse";
+}
+export declare const LeaseID: {
+    $type: "akash.market.v1beta4.LeaseID";
+    encode(message: LeaseID, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): LeaseID;
+    fromJSON(object: any): LeaseID;
+    toJSON(message: LeaseID): unknown;
+    fromPartial<I extends {
+        owner?: string | undefined;
+        dseq?: string | number | Long.Long | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & {
+        owner?: string | undefined;
+        dseq?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>>(object: I): LeaseID;
+};
+export declare const Lease: {
+    $type: "akash.market.v1beta4.Lease";
+    encode(message: Lease, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): Lease;
+    fromJSON(object: any): Lease;
+    toJSON(message: Lease): unknown;
+    fromPartial<I extends {
+        state?: Lease_State | undefined;
+        createdAt?: string | number | Long.Long | undefined;
+        price?: {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } | undefined;
+        leaseId?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+        closedOn?: string | number | Long.Long | undefined;
+    } & {
+        state?: Lease_State | undefined;
+        createdAt?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+        price?: ({
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & Record<Exclude<keyof I["price"], "$type" | "denom" | "amount">, never>) | undefined;
+        leaseId?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["leaseId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["leaseId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+        closedOn?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["closedOn"], "$type" | keyof Long.Long>, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "state" | "createdAt" | "price" | "leaseId" | "closedOn">, never>>(object: I): Lease;
+};
+export declare const LeaseFilters: {
+    $type: "akash.market.v1beta4.LeaseFilters";
+    encode(message: LeaseFilters, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): LeaseFilters;
+    fromJSON(object: any): LeaseFilters;
+    toJSON(message: LeaseFilters): unknown;
+    fromPartial<I extends {
+        owner?: string | undefined;
+        state?: string | undefined;
+        dseq?: string | number | Long.Long | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & {
+        owner?: string | undefined;
+        state?: string | undefined;
+        dseq?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+        gseq?: number | undefined;
+        provider?: string | undefined;
+        oseq?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "owner" | "state" | "dseq" | "gseq" | "provider" | "oseq">, never>>(object: I): LeaseFilters;
+};
+export declare const MsgCreateLease: {
+    $type: "akash.market.v1beta4.MsgCreateLease";
+    encode(message: MsgCreateLease, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateLease;
+    fromJSON(object: any): MsgCreateLease;
+    toJSON(message: MsgCreateLease): unknown;
+    fromPartial<I extends {
+        bidId?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        bidId?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["bidId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["bidId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "bidId">, never>>(object: I): MsgCreateLease;
+};
+export declare const MsgCreateLeaseResponse: {
+    $type: "akash.market.v1beta4.MsgCreateLeaseResponse";
+    encode(_: MsgCreateLeaseResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateLeaseResponse;
+    fromJSON(_: any): MsgCreateLeaseResponse;
+    toJSON(_: MsgCreateLeaseResponse): unknown;
+    fromPartial<I extends {} & {} & Record<Exclude<keyof I, "$type">, never>>(_: I): MsgCreateLeaseResponse;
+};
+export declare const MsgWithdrawLease: {
+    $type: "akash.market.v1beta4.MsgWithdrawLease";
+    encode(message: MsgWithdrawLease, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgWithdrawLease;
+    fromJSON(object: any): MsgWithdrawLease;
+    toJSON(message: MsgWithdrawLease): unknown;
+    fromPartial<I extends {
+        bidId?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        bidId?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["bidId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["bidId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "bidId">, never>>(object: I): MsgWithdrawLease;
+};
+export declare const MsgWithdrawLeaseResponse: {
+    $type: "akash.market.v1beta4.MsgWithdrawLeaseResponse";
+    encode(_: MsgWithdrawLeaseResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgWithdrawLeaseResponse;
+    fromJSON(_: any): MsgWithdrawLeaseResponse;
+    toJSON(_: MsgWithdrawLeaseResponse): unknown;
+    fromPartial<I extends {} & {} & Record<Exclude<keyof I, "$type">, never>>(_: I): MsgWithdrawLeaseResponse;
+};
+export declare const MsgCloseLease: {
+    $type: "akash.market.v1beta4.MsgCloseLease";
+    encode(message: MsgCloseLease, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseLease;
+    fromJSON(object: any): MsgCloseLease;
+    toJSON(message: MsgCloseLease): unknown;
+    fromPartial<I extends {
+        leaseId?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        leaseId?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["leaseId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["leaseId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "leaseId">, never>>(object: I): MsgCloseLease;
+};
+export declare const MsgCloseLeaseResponse: {
+    $type: "akash.market.v1beta4.MsgCloseLeaseResponse";
+    encode(_: MsgCloseLeaseResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseLeaseResponse;
+    fromJSON(_: any): MsgCloseLeaseResponse;
+    toJSON(_: MsgCloseLeaseResponse): unknown;
+    fromPartial<I extends {} & {} & Record<Exclude<keyof I, "$type">, never>>(_: I): MsgCloseLeaseResponse;
+};
+declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
+export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
+    [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]>;
+} : Partial<T>;
+declare type KeysOfUnion<T> = T extends T ? keyof T : never;
+export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
+    [K in keyof P]: Exact<P[K], I[K]>;
+} & Record<Exclude<keyof I, KeysOfUnion<P> | "$type">, never>;
+export {};
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/lease.js b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/lease.js
new file mode 100644
index 0000000..a1499bc
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/lease.js
@@ -0,0 +1,668 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MsgCloseLeaseResponse = exports.MsgCloseLease = exports.MsgWithdrawLeaseResponse = exports.MsgWithdrawLease = exports.MsgCreateLeaseResponse = exports.MsgCreateLease = exports.LeaseFilters = exports.Lease = exports.LeaseID = exports.lease_StateToJSON = exports.lease_StateFromJSON = exports.Lease_State = exports.protobufPackage = void 0;
+/* eslint-disable */
+const typeRegistry_1 = require("../../../typeRegistry");
+const long_1 = __importDefault(require("long"));
+const coin_1 = require("../../../cosmos/base/v1beta1/coin");
+const bid_1 = require("./bid");
+const _m0 = __importStar(require("protobufjs/minimal"));
+exports.protobufPackage = "akash.market.v1beta4";
+/** State is an enum which refers to state of lease */
+var Lease_State;
+(function (Lease_State) {
+    /** invalid - Prefix should start with 0 in enum. So declaring dummy state */
+    Lease_State[Lease_State["invalid"] = 0] = "invalid";
+    /** active - LeaseActive denotes state for lease active */
+    Lease_State[Lease_State["active"] = 1] = "active";
+    /** insufficient_funds - LeaseInsufficientFunds denotes state for lease insufficient_funds */
+    Lease_State[Lease_State["insufficient_funds"] = 2] = "insufficient_funds";
+    /** closed - LeaseClosed denotes state for lease closed */
+    Lease_State[Lease_State["closed"] = 3] = "closed";
+    Lease_State[Lease_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
+})(Lease_State = exports.Lease_State || (exports.Lease_State = {}));
+function lease_StateFromJSON(object) {
+    switch (object) {
+        case 0:
+        case "invalid":
+            return Lease_State.invalid;
+        case 1:
+        case "active":
+            return Lease_State.active;
+        case 2:
+        case "insufficient_funds":
+            return Lease_State.insufficient_funds;
+        case 3:
+        case "closed":
+            return Lease_State.closed;
+        case -1:
+        case "UNRECOGNIZED":
+        default:
+            return Lease_State.UNRECOGNIZED;
+    }
+}
+exports.lease_StateFromJSON = lease_StateFromJSON;
+function lease_StateToJSON(object) {
+    switch (object) {
+        case Lease_State.invalid:
+            return "invalid";
+        case Lease_State.active:
+            return "active";
+        case Lease_State.insufficient_funds:
+            return "insufficient_funds";
+        case Lease_State.closed:
+            return "closed";
+        case Lease_State.UNRECOGNIZED:
+        default:
+            return "UNRECOGNIZED";
+    }
+}
+exports.lease_StateToJSON = lease_StateToJSON;
+function createBaseLeaseID() {
+    return {
+        $type: "akash.market.v1beta4.LeaseID",
+        owner: "",
+        dseq: long_1.default.UZERO,
+        gseq: 0,
+        oseq: 0,
+        provider: "",
+    };
+}
+exports.LeaseID = {
+    $type: "akash.market.v1beta4.LeaseID",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.owner !== "") {
+            writer.uint32(10).string(message.owner);
+        }
+        if (!message.dseq.isZero()) {
+            writer.uint32(16).uint64(message.dseq);
+        }
+        if (message.gseq !== 0) {
+            writer.uint32(24).uint32(message.gseq);
+        }
+        if (message.oseq !== 0) {
+            writer.uint32(32).uint32(message.oseq);
+        }
+        if (message.provider !== "") {
+            writer.uint32(42).string(message.provider);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseLeaseID();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.owner = reader.string();
+                    break;
+                case 2:
+                    message.dseq = reader.uint64();
+                    break;
+                case 3:
+                    message.gseq = reader.uint32();
+                    break;
+                case 4:
+                    message.oseq = reader.uint32();
+                    break;
+                case 5:
+                    message.provider = reader.string();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.LeaseID.$type,
+            owner: isSet(object.owner) ? String(object.owner) : "",
+            dseq: isSet(object.dseq) ? long_1.default.fromValue(object.dseq) : long_1.default.UZERO,
+            gseq: isSet(object.gseq) ? Number(object.gseq) : 0,
+            oseq: isSet(object.oseq) ? Number(object.oseq) : 0,
+            provider: isSet(object.provider) ? String(object.provider) : "",
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.owner !== undefined && (obj.owner = message.owner);
+        message.dseq !== undefined &&
+            (obj.dseq = (message.dseq || long_1.default.UZERO).toString());
+        message.gseq !== undefined && (obj.gseq = Math.round(message.gseq));
+        message.oseq !== undefined && (obj.oseq = Math.round(message.oseq));
+        message.provider !== undefined && (obj.provider = message.provider);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseLeaseID();
+        message.owner = object.owner ?? "";
+        message.dseq =
+            object.dseq !== undefined && object.dseq !== null
+                ? long_1.default.fromValue(object.dseq)
+                : long_1.default.UZERO;
+        message.gseq = object.gseq ?? 0;
+        message.oseq = object.oseq ?? 0;
+        message.provider = object.provider ?? "";
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.LeaseID.$type, exports.LeaseID);
+function createBaseLease() {
+    return {
+        $type: "akash.market.v1beta4.Lease",
+        leaseId: undefined,
+        state: 0,
+        price: undefined,
+        createdAt: long_1.default.ZERO,
+        closedOn: long_1.default.ZERO,
+    };
+}
+exports.Lease = {
+    $type: "akash.market.v1beta4.Lease",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.leaseId !== undefined) {
+            exports.LeaseID.encode(message.leaseId, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.state !== 0) {
+            writer.uint32(16).int32(message.state);
+        }
+        if (message.price !== undefined) {
+            coin_1.DecCoin.encode(message.price, writer.uint32(26).fork()).ldelim();
+        }
+        if (!message.createdAt.isZero()) {
+            writer.uint32(32).int64(message.createdAt);
+        }
+        if (!message.closedOn.isZero()) {
+            writer.uint32(40).int64(message.closedOn);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseLease();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.leaseId = exports.LeaseID.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.state = reader.int32();
+                    break;
+                case 3:
+                    message.price = coin_1.DecCoin.decode(reader, reader.uint32());
+                    break;
+                case 4:
+                    message.createdAt = reader.int64();
+                    break;
+                case 5:
+                    message.closedOn = reader.int64();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.Lease.$type,
+            leaseId: isSet(object.leaseId)
+                ? exports.LeaseID.fromJSON(object.leaseId)
+                : undefined,
+            state: isSet(object.state) ? lease_StateFromJSON(object.state) : 0,
+            price: isSet(object.price) ? coin_1.DecCoin.fromJSON(object.price) : undefined,
+            createdAt: isSet(object.createdAt)
+                ? long_1.default.fromValue(object.createdAt)
+                : long_1.default.ZERO,
+            closedOn: isSet(object.closedOn)
+                ? long_1.default.fromValue(object.closedOn)
+                : long_1.default.ZERO,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.leaseId !== undefined &&
+            (obj.leaseId = message.leaseId
+                ? exports.LeaseID.toJSON(message.leaseId)
+                : undefined);
+        message.state !== undefined &&
+            (obj.state = lease_StateToJSON(message.state));
+        message.price !== undefined &&
+            (obj.price = message.price ? coin_1.DecCoin.toJSON(message.price) : undefined);
+        message.createdAt !== undefined &&
+            (obj.createdAt = (message.createdAt || long_1.default.ZERO).toString());
+        message.closedOn !== undefined &&
+            (obj.closedOn = (message.closedOn || long_1.default.ZERO).toString());
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseLease();
+        message.leaseId =
+            object.leaseId !== undefined && object.leaseId !== null
+                ? exports.LeaseID.fromPartial(object.leaseId)
+                : undefined;
+        message.state = object.state ?? 0;
+        message.price =
+            object.price !== undefined && object.price !== null
+                ? coin_1.DecCoin.fromPartial(object.price)
+                : undefined;
+        message.createdAt =
+            object.createdAt !== undefined && object.createdAt !== null
+                ? long_1.default.fromValue(object.createdAt)
+                : long_1.default.ZERO;
+        message.closedOn =
+            object.closedOn !== undefined && object.closedOn !== null
+                ? long_1.default.fromValue(object.closedOn)
+                : long_1.default.ZERO;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.Lease.$type, exports.Lease);
+function createBaseLeaseFilters() {
+    return {
+        $type: "akash.market.v1beta4.LeaseFilters",
+        owner: "",
+        dseq: long_1.default.UZERO,
+        gseq: 0,
+        oseq: 0,
+        provider: "",
+        state: "",
+    };
+}
+exports.LeaseFilters = {
+    $type: "akash.market.v1beta4.LeaseFilters",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.owner !== "") {
+            writer.uint32(10).string(message.owner);
+        }
+        if (!message.dseq.isZero()) {
+            writer.uint32(16).uint64(message.dseq);
+        }
+        if (message.gseq !== 0) {
+            writer.uint32(24).uint32(message.gseq);
+        }
+        if (message.oseq !== 0) {
+            writer.uint32(32).uint32(message.oseq);
+        }
+        if (message.provider !== "") {
+            writer.uint32(42).string(message.provider);
+        }
+        if (message.state !== "") {
+            writer.uint32(50).string(message.state);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseLeaseFilters();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.owner = reader.string();
+                    break;
+                case 2:
+                    message.dseq = reader.uint64();
+                    break;
+                case 3:
+                    message.gseq = reader.uint32();
+                    break;
+                case 4:
+                    message.oseq = reader.uint32();
+                    break;
+                case 5:
+                    message.provider = reader.string();
+                    break;
+                case 6:
+                    message.state = reader.string();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.LeaseFilters.$type,
+            owner: isSet(object.owner) ? String(object.owner) : "",
+            dseq: isSet(object.dseq) ? long_1.default.fromValue(object.dseq) : long_1.default.UZERO,
+            gseq: isSet(object.gseq) ? Number(object.gseq) : 0,
+            oseq: isSet(object.oseq) ? Number(object.oseq) : 0,
+            provider: isSet(object.provider) ? String(object.provider) : "",
+            state: isSet(object.state) ? String(object.state) : "",
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.owner !== undefined && (obj.owner = message.owner);
+        message.dseq !== undefined &&
+            (obj.dseq = (message.dseq || long_1.default.UZERO).toString());
+        message.gseq !== undefined && (obj.gseq = Math.round(message.gseq));
+        message.oseq !== undefined && (obj.oseq = Math.round(message.oseq));
+        message.provider !== undefined && (obj.provider = message.provider);
+        message.state !== undefined && (obj.state = message.state);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseLeaseFilters();
+        message.owner = object.owner ?? "";
+        message.dseq =
+            object.dseq !== undefined && object.dseq !== null
+                ? long_1.default.fromValue(object.dseq)
+                : long_1.default.UZERO;
+        message.gseq = object.gseq ?? 0;
+        message.oseq = object.oseq ?? 0;
+        message.provider = object.provider ?? "";
+        message.state = object.state ?? "";
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.LeaseFilters.$type, exports.LeaseFilters);
+function createBaseMsgCreateLease() {
+    return { $type: "akash.market.v1beta4.MsgCreateLease", bidId: undefined };
+}
+exports.MsgCreateLease = {
+    $type: "akash.market.v1beta4.MsgCreateLease",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.bidId !== undefined) {
+            bid_1.BidID.encode(message.bidId, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCreateLease();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.bidId = bid_1.BidID.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.MsgCreateLease.$type,
+            bidId: isSet(object.bidId) ? bid_1.BidID.fromJSON(object.bidId) : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.bidId !== undefined &&
+            (obj.bidId = message.bidId ? bid_1.BidID.toJSON(message.bidId) : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseMsgCreateLease();
+        message.bidId =
+            object.bidId !== undefined && object.bidId !== null
+                ? bid_1.BidID.fromPartial(object.bidId)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCreateLease.$type, exports.MsgCreateLease);
+function createBaseMsgCreateLeaseResponse() {
+    return { $type: "akash.market.v1beta4.MsgCreateLeaseResponse" };
+}
+exports.MsgCreateLeaseResponse = {
+    $type: "akash.market.v1beta4.MsgCreateLeaseResponse",
+    encode(_, writer = _m0.Writer.create()) {
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCreateLeaseResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(_) {
+        return {
+            $type: exports.MsgCreateLeaseResponse.$type,
+        };
+    },
+    toJSON(_) {
+        const obj = {};
+        return obj;
+    },
+    fromPartial(_) {
+        const message = createBaseMsgCreateLeaseResponse();
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCreateLeaseResponse.$type, exports.MsgCreateLeaseResponse);
+function createBaseMsgWithdrawLease() {
+    return { $type: "akash.market.v1beta4.MsgWithdrawLease", bidId: undefined };
+}
+exports.MsgWithdrawLease = {
+    $type: "akash.market.v1beta4.MsgWithdrawLease",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.bidId !== undefined) {
+            exports.LeaseID.encode(message.bidId, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgWithdrawLease();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.bidId = exports.LeaseID.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.MsgWithdrawLease.$type,
+            bidId: isSet(object.bidId) ? exports.LeaseID.fromJSON(object.bidId) : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.bidId !== undefined &&
+            (obj.bidId = message.bidId ? exports.LeaseID.toJSON(message.bidId) : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseMsgWithdrawLease();
+        message.bidId =
+            object.bidId !== undefined && object.bidId !== null
+                ? exports.LeaseID.fromPartial(object.bidId)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgWithdrawLease.$type, exports.MsgWithdrawLease);
+function createBaseMsgWithdrawLeaseResponse() {
+    return { $type: "akash.market.v1beta4.MsgWithdrawLeaseResponse" };
+}
+exports.MsgWithdrawLeaseResponse = {
+    $type: "akash.market.v1beta4.MsgWithdrawLeaseResponse",
+    encode(_, writer = _m0.Writer.create()) {
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgWithdrawLeaseResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(_) {
+        return {
+            $type: exports.MsgWithdrawLeaseResponse.$type,
+        };
+    },
+    toJSON(_) {
+        const obj = {};
+        return obj;
+    },
+    fromPartial(_) {
+        const message = createBaseMsgWithdrawLeaseResponse();
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgWithdrawLeaseResponse.$type, exports.MsgWithdrawLeaseResponse);
+function createBaseMsgCloseLease() {
+    return { $type: "akash.market.v1beta4.MsgCloseLease", leaseId: undefined };
+}
+exports.MsgCloseLease = {
+    $type: "akash.market.v1beta4.MsgCloseLease",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.leaseId !== undefined) {
+            exports.LeaseID.encode(message.leaseId, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCloseLease();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.leaseId = exports.LeaseID.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.MsgCloseLease.$type,
+            leaseId: isSet(object.leaseId)
+                ? exports.LeaseID.fromJSON(object.leaseId)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.leaseId !== undefined &&
+            (obj.leaseId = message.leaseId
+                ? exports.LeaseID.toJSON(message.leaseId)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseMsgCloseLease();
+        message.leaseId =
+            object.leaseId !== undefined && object.leaseId !== null
+                ? exports.LeaseID.fromPartial(object.leaseId)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCloseLease.$type, exports.MsgCloseLease);
+function createBaseMsgCloseLeaseResponse() {
+    return { $type: "akash.market.v1beta4.MsgCloseLeaseResponse" };
+}
+exports.MsgCloseLeaseResponse = {
+    $type: "akash.market.v1beta4.MsgCloseLeaseResponse",
+    encode(_, writer = _m0.Writer.create()) {
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseMsgCloseLeaseResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(_) {
+        return {
+            $type: exports.MsgCloseLeaseResponse.$type,
+        };
+    },
+    toJSON(_) {
+        const obj = {};
+        return obj;
+    },
+    fromPartial(_) {
+        const message = createBaseMsgCloseLeaseResponse();
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.MsgCloseLeaseResponse.$type, exports.MsgCloseLeaseResponse);
+if (_m0.util.Long !== long_1.default) {
+    _m0.util.Long = long_1.default;
+    _m0.configure();
+}
+function isSet(value) {
+    return value !== null && value !== undefined;
+}
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/order.d.ts b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/order.d.ts
new file mode 100644
index 0000000..dfbe22a
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/order.d.ts
@@ -0,0 +1,861 @@
+import Long from "long";
+import { GroupSpec } from "../../deployment/v1beta3/groupspec";
+import * as _m0 from "protobufjs/minimal";
+export declare const protobufPackage = "akash.market.v1beta4";
+/** OrderID stores owner and all other seq numbers */
+export interface OrderID {
+    $type: "akash.market.v1beta4.OrderID";
+    owner: string;
+    dseq: Long;
+    gseq: number;
+    oseq: number;
+}
+/** Order stores orderID, state of order and other details */
+export interface Order {
+    $type: "akash.market.v1beta4.Order";
+    orderId: OrderID | undefined;
+    state: Order_State;
+    spec: GroupSpec | undefined;
+    createdAt: Long;
+}
+/** State is an enum which refers to state of order */
+export declare enum Order_State {
+    /** invalid - Prefix should start with 0 in enum. So declaring dummy state */
+    invalid = 0,
+    /** open - OrderOpen denotes state for order open */
+    open = 1,
+    /** active - OrderMatched denotes state for order matched */
+    active = 2,
+    /** closed - OrderClosed denotes state for order lost */
+    closed = 3,
+    UNRECOGNIZED = -1
+}
+export declare function order_StateFromJSON(object: any): Order_State;
+export declare function order_StateToJSON(object: Order_State): string;
+/** OrderFilters defines flags for order list filter */
+export interface OrderFilters {
+    $type: "akash.market.v1beta4.OrderFilters";
+    owner: string;
+    dseq: Long;
+    gseq: number;
+    oseq: number;
+    state: string;
+}
+export declare const OrderID: {
+    $type: "akash.market.v1beta4.OrderID";
+    encode(message: OrderID, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): OrderID;
+    fromJSON(object: any): OrderID;
+    toJSON(message: OrderID): unknown;
+    fromPartial<I extends {
+        owner?: string | undefined;
+        dseq?: string | number | Long.Long | undefined;
+        gseq?: number | undefined;
+        oseq?: number | undefined;
+    } & {
+        owner?: string | undefined;
+        dseq?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+        gseq?: number | undefined;
+        oseq?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "owner" | "dseq" | "gseq" | "oseq">, never>>(object: I): OrderID;
+};
+export declare const Order: {
+    $type: "akash.market.v1beta4.Order";
+    encode(message: Order, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): Order;
+    fromJSON(object: any): Order;
+    toJSON(message: Order): unknown;
+    fromPartial<I extends {
+        state?: Order_State | undefined;
+        createdAt?: string | number | Long.Long | undefined;
+        orderId?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+        spec?: {
+            name?: string | undefined;
+            requirements?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                signedBy?: {
+                    allOf?: string[] | undefined;
+                    anyOf?: string[] | undefined;
+                } | undefined;
+            } | undefined;
+            resources?: {
+                count?: number | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                resource?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+            }[] | undefined;
+        } | undefined;
+    } & {
+        state?: Order_State | undefined;
+        createdAt?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+        orderId?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["orderId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["orderId"], "$type" | "owner" | "dseq" | "gseq" | "oseq">, never>) | undefined;
+        spec?: ({
+            name?: string | undefined;
+            requirements?: {
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                signedBy?: {
+                    allOf?: string[] | undefined;
+                    anyOf?: string[] | undefined;
+                } | undefined;
+            } | undefined;
+            resources?: {
+                count?: number | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                resource?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+            }[] | undefined;
+        } & {
+            name?: string | undefined;
+            requirements?: ({
+                attributes?: {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] | undefined;
+                signedBy?: {
+                    allOf?: string[] | undefined;
+                    anyOf?: string[] | undefined;
+                } | undefined;
+            } & {
+                attributes?: ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[] & ({
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                } & Record<Exclude<keyof I["spec"]["requirements"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["spec"]["requirements"]["attributes"], "$type" | keyof {
+                    key?: string | undefined;
+                    value?: string | undefined;
+                }[]>, never>) | undefined;
+                signedBy?: ({
+                    allOf?: string[] | undefined;
+                    anyOf?: string[] | undefined;
+                } & {
+                    allOf?: (string[] & string[] & Record<Exclude<keyof I["spec"]["requirements"]["signedBy"]["allOf"], "$type" | keyof string[]>, never>) | undefined;
+                    anyOf?: (string[] & string[] & Record<Exclude<keyof I["spec"]["requirements"]["signedBy"]["anyOf"], "$type" | keyof string[]>, never>) | undefined;
+                } & Record<Exclude<keyof I["spec"]["requirements"]["signedBy"], "$type" | "allOf" | "anyOf">, never>) | undefined;
+            } & Record<Exclude<keyof I["spec"]["requirements"], "$type" | "attributes" | "signedBy">, never>) | undefined;
+            resources?: ({
+                count?: number | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                resource?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+            }[] & ({
+                count?: number | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                resource?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+            } & {
+                count?: number | undefined;
+                price?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["spec"]["resources"][number]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+                resource?: ({
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } & {
+                    storage?: ({
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] & ({
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        name?: string | undefined;
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["storage"][number]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        quantity?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["storage"], "$type" | keyof {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[]>, never>) | undefined;
+                    cpu?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["cpu"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        units?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                    memory?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["memory"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        quantity?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                    id?: number | undefined;
+                    endpoints?: ({
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] & ({
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    } & {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["endpoints"], "$type" | keyof {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[]>, never>) | undefined;
+                    gpu?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["gpu"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        units?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                } & Record<Exclude<keyof I["spec"]["resources"][number]["resource"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+            } & Record<Exclude<keyof I["spec"]["resources"][number], "$type" | "count" | "price" | "resource">, never>)[] & Record<Exclude<keyof I["spec"]["resources"], "$type" | keyof {
+                count?: number | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                resource?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+            }[]>, never>) | undefined;
+        } & Record<Exclude<keyof I["spec"], "$type" | "name" | "requirements" | "resources">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "state" | "createdAt" | "orderId" | "spec">, never>>(object: I): Order;
+};
+export declare const OrderFilters: {
+    $type: "akash.market.v1beta4.OrderFilters";
+    encode(message: OrderFilters, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): OrderFilters;
+    fromJSON(object: any): OrderFilters;
+    toJSON(message: OrderFilters): unknown;
+    fromPartial<I extends {
+        owner?: string | undefined;
+        state?: string | undefined;
+        dseq?: string | number | Long.Long | undefined;
+        gseq?: number | undefined;
+        oseq?: number | undefined;
+    } & {
+        owner?: string | undefined;
+        state?: string | undefined;
+        dseq?: string | number | (Long.Long & {
+            high: number;
+            low: number;
+            unsigned: boolean;
+            add: (addend: string | number | Long.Long) => Long.Long;
+            and: (other: string | number | Long.Long) => Long.Long;
+            compare: (other: string | number | Long.Long) => number;
+            comp: (other: string | number | Long.Long) => number;
+            divide: (divisor: string | number | Long.Long) => Long.Long;
+            div: (divisor: string | number | Long.Long) => Long.Long;
+            equals: (other: string | number | Long.Long) => boolean;
+            eq: (other: string | number | Long.Long) => boolean;
+            getHighBits: () => number;
+            getHighBitsUnsigned: () => number;
+            getLowBits: () => number;
+            getLowBitsUnsigned: () => number;
+            getNumBitsAbs: () => number;
+            greaterThan: (other: string | number | Long.Long) => boolean;
+            gt: (other: string | number | Long.Long) => boolean;
+            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+            gte: (other: string | number | Long.Long) => boolean;
+            isEven: () => boolean;
+            isNegative: () => boolean;
+            isOdd: () => boolean;
+            isPositive: () => boolean;
+            isZero: () => boolean;
+            lessThan: (other: string | number | Long.Long) => boolean;
+            lt: (other: string | number | Long.Long) => boolean;
+            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+            lte: (other: string | number | Long.Long) => boolean;
+            modulo: (other: string | number | Long.Long) => Long.Long;
+            mod: (other: string | number | Long.Long) => Long.Long;
+            multiply: (multiplier: string | number | Long.Long) => Long.Long;
+            mul: (multiplier: string | number | Long.Long) => Long.Long;
+            negate: () => Long.Long;
+            neg: () => Long.Long;
+            not: () => Long.Long;
+            notEquals: (other: string | number | Long.Long) => boolean;
+            neq: (other: string | number | Long.Long) => boolean;
+            or: (other: string | number | Long.Long) => Long.Long;
+            shiftLeft: (numBits: number | Long.Long) => Long.Long;
+            shl: (numBits: number | Long.Long) => Long.Long;
+            shiftRight: (numBits: number | Long.Long) => Long.Long;
+            shr: (numBits: number | Long.Long) => Long.Long;
+            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+            shru: (numBits: number | Long.Long) => Long.Long;
+            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+            sub: (subtrahend: string | number | Long.Long) => Long.Long;
+            toInt: () => number;
+            toNumber: () => number;
+            toBytes: (le?: boolean | undefined) => number[];
+            toBytesLE: () => number[];
+            toBytesBE: () => number[];
+            toSigned: () => Long.Long;
+            toString: (radix?: number | undefined) => string;
+            toUnsigned: () => Long.Long;
+            xor: (other: string | number | Long.Long) => Long.Long;
+        } & Record<Exclude<keyof I["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+        gseq?: number | undefined;
+        oseq?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "owner" | "state" | "dseq" | "gseq" | "oseq">, never>>(object: I): OrderFilters;
+};
+declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
+export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
+    [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]>;
+} : Partial<T>;
+declare type KeysOfUnion<T> = T extends T ? keyof T : never;
+export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
+    [K in keyof P]: Exact<P[K], I[K]>;
+} & Record<Exclude<keyof I, KeysOfUnion<P> | "$type">, never>;
+export {};
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/order.js b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/order.js
new file mode 100644
index 0000000..5d27a33
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/order.js
@@ -0,0 +1,366 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.OrderFilters = exports.Order = exports.OrderID = exports.order_StateToJSON = exports.order_StateFromJSON = exports.Order_State = exports.protobufPackage = void 0;
+/* eslint-disable */
+const typeRegistry_1 = require("../../../typeRegistry");
+const long_1 = __importDefault(require("long"));
+const groupspec_1 = require("../../deployment/v1beta3/groupspec");
+const _m0 = __importStar(require("protobufjs/minimal"));
+exports.protobufPackage = "akash.market.v1beta4";
+/** State is an enum which refers to state of order */
+var Order_State;
+(function (Order_State) {
+    /** invalid - Prefix should start with 0 in enum. So declaring dummy state */
+    Order_State[Order_State["invalid"] = 0] = "invalid";
+    /** open - OrderOpen denotes state for order open */
+    Order_State[Order_State["open"] = 1] = "open";
+    /** active - OrderMatched denotes state for order matched */
+    Order_State[Order_State["active"] = 2] = "active";
+    /** closed - OrderClosed denotes state for order lost */
+    Order_State[Order_State["closed"] = 3] = "closed";
+    Order_State[Order_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
+})(Order_State = exports.Order_State || (exports.Order_State = {}));
+function order_StateFromJSON(object) {
+    switch (object) {
+        case 0:
+        case "invalid":
+            return Order_State.invalid;
+        case 1:
+        case "open":
+            return Order_State.open;
+        case 2:
+        case "active":
+            return Order_State.active;
+        case 3:
+        case "closed":
+            return Order_State.closed;
+        case -1:
+        case "UNRECOGNIZED":
+        default:
+            return Order_State.UNRECOGNIZED;
+    }
+}
+exports.order_StateFromJSON = order_StateFromJSON;
+function order_StateToJSON(object) {
+    switch (object) {
+        case Order_State.invalid:
+            return "invalid";
+        case Order_State.open:
+            return "open";
+        case Order_State.active:
+            return "active";
+        case Order_State.closed:
+            return "closed";
+        case Order_State.UNRECOGNIZED:
+        default:
+            return "UNRECOGNIZED";
+    }
+}
+exports.order_StateToJSON = order_StateToJSON;
+function createBaseOrderID() {
+    return {
+        $type: "akash.market.v1beta4.OrderID",
+        owner: "",
+        dseq: long_1.default.UZERO,
+        gseq: 0,
+        oseq: 0,
+    };
+}
+exports.OrderID = {
+    $type: "akash.market.v1beta4.OrderID",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.owner !== "") {
+            writer.uint32(10).string(message.owner);
+        }
+        if (!message.dseq.isZero()) {
+            writer.uint32(16).uint64(message.dseq);
+        }
+        if (message.gseq !== 0) {
+            writer.uint32(24).uint32(message.gseq);
+        }
+        if (message.oseq !== 0) {
+            writer.uint32(32).uint32(message.oseq);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseOrderID();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.owner = reader.string();
+                    break;
+                case 2:
+                    message.dseq = reader.uint64();
+                    break;
+                case 3:
+                    message.gseq = reader.uint32();
+                    break;
+                case 4:
+                    message.oseq = reader.uint32();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.OrderID.$type,
+            owner: isSet(object.owner) ? String(object.owner) : "",
+            dseq: isSet(object.dseq) ? long_1.default.fromValue(object.dseq) : long_1.default.UZERO,
+            gseq: isSet(object.gseq) ? Number(object.gseq) : 0,
+            oseq: isSet(object.oseq) ? Number(object.oseq) : 0,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.owner !== undefined && (obj.owner = message.owner);
+        message.dseq !== undefined &&
+            (obj.dseq = (message.dseq || long_1.default.UZERO).toString());
+        message.gseq !== undefined && (obj.gseq = Math.round(message.gseq));
+        message.oseq !== undefined && (obj.oseq = Math.round(message.oseq));
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseOrderID();
+        message.owner = object.owner ?? "";
+        message.dseq =
+            object.dseq !== undefined && object.dseq !== null
+                ? long_1.default.fromValue(object.dseq)
+                : long_1.default.UZERO;
+        message.gseq = object.gseq ?? 0;
+        message.oseq = object.oseq ?? 0;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.OrderID.$type, exports.OrderID);
+function createBaseOrder() {
+    return {
+        $type: "akash.market.v1beta4.Order",
+        orderId: undefined,
+        state: 0,
+        spec: undefined,
+        createdAt: long_1.default.ZERO,
+    };
+}
+exports.Order = {
+    $type: "akash.market.v1beta4.Order",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.orderId !== undefined) {
+            exports.OrderID.encode(message.orderId, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.state !== 0) {
+            writer.uint32(16).int32(message.state);
+        }
+        if (message.spec !== undefined) {
+            groupspec_1.GroupSpec.encode(message.spec, writer.uint32(26).fork()).ldelim();
+        }
+        if (!message.createdAt.isZero()) {
+            writer.uint32(32).int64(message.createdAt);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseOrder();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.orderId = exports.OrderID.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.state = reader.int32();
+                    break;
+                case 3:
+                    message.spec = groupspec_1.GroupSpec.decode(reader, reader.uint32());
+                    break;
+                case 4:
+                    message.createdAt = reader.int64();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.Order.$type,
+            orderId: isSet(object.orderId)
+                ? exports.OrderID.fromJSON(object.orderId)
+                : undefined,
+            state: isSet(object.state) ? order_StateFromJSON(object.state) : 0,
+            spec: isSet(object.spec) ? groupspec_1.GroupSpec.fromJSON(object.spec) : undefined,
+            createdAt: isSet(object.createdAt)
+                ? long_1.default.fromValue(object.createdAt)
+                : long_1.default.ZERO,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.orderId !== undefined &&
+            (obj.orderId = message.orderId
+                ? exports.OrderID.toJSON(message.orderId)
+                : undefined);
+        message.state !== undefined &&
+            (obj.state = order_StateToJSON(message.state));
+        message.spec !== undefined &&
+            (obj.spec = message.spec ? groupspec_1.GroupSpec.toJSON(message.spec) : undefined);
+        message.createdAt !== undefined &&
+            (obj.createdAt = (message.createdAt || long_1.default.ZERO).toString());
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseOrder();
+        message.orderId =
+            object.orderId !== undefined && object.orderId !== null
+                ? exports.OrderID.fromPartial(object.orderId)
+                : undefined;
+        message.state = object.state ?? 0;
+        message.spec =
+            object.spec !== undefined && object.spec !== null
+                ? groupspec_1.GroupSpec.fromPartial(object.spec)
+                : undefined;
+        message.createdAt =
+            object.createdAt !== undefined && object.createdAt !== null
+                ? long_1.default.fromValue(object.createdAt)
+                : long_1.default.ZERO;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.Order.$type, exports.Order);
+function createBaseOrderFilters() {
+    return {
+        $type: "akash.market.v1beta4.OrderFilters",
+        owner: "",
+        dseq: long_1.default.UZERO,
+        gseq: 0,
+        oseq: 0,
+        state: "",
+    };
+}
+exports.OrderFilters = {
+    $type: "akash.market.v1beta4.OrderFilters",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.owner !== "") {
+            writer.uint32(10).string(message.owner);
+        }
+        if (!message.dseq.isZero()) {
+            writer.uint32(16).uint64(message.dseq);
+        }
+        if (message.gseq !== 0) {
+            writer.uint32(24).uint32(message.gseq);
+        }
+        if (message.oseq !== 0) {
+            writer.uint32(32).uint32(message.oseq);
+        }
+        if (message.state !== "") {
+            writer.uint32(42).string(message.state);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseOrderFilters();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.owner = reader.string();
+                    break;
+                case 2:
+                    message.dseq = reader.uint64();
+                    break;
+                case 3:
+                    message.gseq = reader.uint32();
+                    break;
+                case 4:
+                    message.oseq = reader.uint32();
+                    break;
+                case 5:
+                    message.state = reader.string();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.OrderFilters.$type,
+            owner: isSet(object.owner) ? String(object.owner) : "",
+            dseq: isSet(object.dseq) ? long_1.default.fromValue(object.dseq) : long_1.default.UZERO,
+            gseq: isSet(object.gseq) ? Number(object.gseq) : 0,
+            oseq: isSet(object.oseq) ? Number(object.oseq) : 0,
+            state: isSet(object.state) ? String(object.state) : "",
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.owner !== undefined && (obj.owner = message.owner);
+        message.dseq !== undefined &&
+            (obj.dseq = (message.dseq || long_1.default.UZERO).toString());
+        message.gseq !== undefined && (obj.gseq = Math.round(message.gseq));
+        message.oseq !== undefined && (obj.oseq = Math.round(message.oseq));
+        message.state !== undefined && (obj.state = message.state);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseOrderFilters();
+        message.owner = object.owner ?? "";
+        message.dseq =
+            object.dseq !== undefined && object.dseq !== null
+                ? long_1.default.fromValue(object.dseq)
+                : long_1.default.UZERO;
+        message.gseq = object.gseq ?? 0;
+        message.oseq = object.oseq ?? 0;
+        message.state = object.state ?? "";
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.OrderFilters.$type, exports.OrderFilters);
+if (_m0.util.Long !== long_1.default) {
+    _m0.util.Long = long_1.default;
+    _m0.configure();
+}
+function isSet(value) {
+    return value !== null && value !== undefined;
+}
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/params.d.ts b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/params.d.ts
new file mode 100644
index 0000000..4e59217
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/params.d.ts
@@ -0,0 +1,42 @@
+import Long from "long";
+import { Coin } from "../../../cosmos/base/v1beta1/coin";
+import * as _m0 from "protobufjs/minimal";
+export declare const protobufPackage = "akash.market.v1beta4";
+/** Params is the params for the x/market module */
+export interface Params {
+    $type: "akash.market.v1beta4.Params";
+    bidMinDeposit: Coin | undefined;
+    orderMaxBids: number;
+}
+export declare const Params: {
+    $type: "akash.market.v1beta4.Params";
+    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
+    fromJSON(object: any): Params;
+    toJSON(message: Params): unknown;
+    fromPartial<I extends {
+        bidMinDeposit?: {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } | undefined;
+        orderMaxBids?: number | undefined;
+    } & {
+        bidMinDeposit?: ({
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & {
+            denom?: string | undefined;
+            amount?: string | undefined;
+        } & Record<Exclude<keyof I["bidMinDeposit"], "$type" | "denom" | "amount">, never>) | undefined;
+        orderMaxBids?: number | undefined;
+    } & Record<Exclude<keyof I, "$type" | "bidMinDeposit" | "orderMaxBids">, never>>(object: I): Params;
+};
+declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
+export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
+    [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]>;
+} : Partial<T>;
+declare type KeysOfUnion<T> = T extends T ? keyof T : never;
+export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
+    [K in keyof P]: Exact<P[K], I[K]>;
+} & Record<Exclude<keyof I, KeysOfUnion<P> | "$type">, never>;
+export {};
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/params.js b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/params.js
new file mode 100644
index 0000000..790141a
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/params.js
@@ -0,0 +1,112 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.Params = exports.protobufPackage = void 0;
+/* eslint-disable */
+const typeRegistry_1 = require("../../../typeRegistry");
+const long_1 = __importDefault(require("long"));
+const coin_1 = require("../../../cosmos/base/v1beta1/coin");
+const _m0 = __importStar(require("protobufjs/minimal"));
+exports.protobufPackage = "akash.market.v1beta4";
+function createBaseParams() {
+    return {
+        $type: "akash.market.v1beta4.Params",
+        bidMinDeposit: undefined,
+        orderMaxBids: 0,
+    };
+}
+exports.Params = {
+    $type: "akash.market.v1beta4.Params",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.bidMinDeposit !== undefined) {
+            coin_1.Coin.encode(message.bidMinDeposit, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.orderMaxBids !== 0) {
+            writer.uint32(16).uint32(message.orderMaxBids);
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseParams();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.bidMinDeposit = coin_1.Coin.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.orderMaxBids = reader.uint32();
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.Params.$type,
+            bidMinDeposit: isSet(object.bidMinDeposit)
+                ? coin_1.Coin.fromJSON(object.bidMinDeposit)
+                : undefined,
+            orderMaxBids: isSet(object.orderMaxBids)
+                ? Number(object.orderMaxBids)
+                : 0,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.bidMinDeposit !== undefined &&
+            (obj.bidMinDeposit = message.bidMinDeposit
+                ? coin_1.Coin.toJSON(message.bidMinDeposit)
+                : undefined);
+        message.orderMaxBids !== undefined &&
+            (obj.orderMaxBids = Math.round(message.orderMaxBids));
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseParams();
+        message.bidMinDeposit =
+            object.bidMinDeposit !== undefined && object.bidMinDeposit !== null
+                ? coin_1.Coin.fromPartial(object.bidMinDeposit)
+                : undefined;
+        message.orderMaxBids = object.orderMaxBids ?? 0;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.Params.$type, exports.Params);
+if (_m0.util.Long !== long_1.default) {
+    _m0.util.Long = long_1.default;
+    _m0.configure();
+}
+function isSet(value) {
+    return value !== null && value !== undefined;
+}
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/query.d.ts b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/query.d.ts
new file mode 100644
index 0000000..200ac37
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/query.d.ts
@@ -0,0 +1,5331 @@
+import Long from "long";
+import { OrderFilters, Order, OrderID } from "./order";
+import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
+import { BidFilters, BidID, Bid } from "./bid";
+import { Account, FractionalPayment } from "../../escrow/v1beta3/types";
+import { LeaseFilters, LeaseID, Lease } from "./lease";
+import * as _m0 from "protobufjs/minimal";
+export declare const protobufPackage = "akash.market.v1beta4";
+/** QueryOrdersRequest is request type for the Query/Orders RPC method */
+export interface QueryOrdersRequest {
+    $type: "akash.market.v1beta4.QueryOrdersRequest";
+    filters: OrderFilters | undefined;
+    pagination: PageRequest | undefined;
+}
+/** QueryOrdersResponse is response type for the Query/Orders RPC method */
+export interface QueryOrdersResponse {
+    $type: "akash.market.v1beta4.QueryOrdersResponse";
+    orders: Order[];
+    pagination: PageResponse | undefined;
+}
+/** QueryOrderRequest is request type for the Query/Order RPC method */
+export interface QueryOrderRequest {
+    $type: "akash.market.v1beta4.QueryOrderRequest";
+    id: OrderID | undefined;
+}
+/** QueryOrderResponse is response type for the Query/Order RPC method */
+export interface QueryOrderResponse {
+    $type: "akash.market.v1beta4.QueryOrderResponse";
+    order: Order | undefined;
+}
+/** QueryBidsRequest is request type for the Query/Bids RPC method */
+export interface QueryBidsRequest {
+    $type: "akash.market.v1beta4.QueryBidsRequest";
+    filters: BidFilters | undefined;
+    pagination: PageRequest | undefined;
+}
+/** QueryBidsResponse is response type for the Query/Bids RPC method */
+export interface QueryBidsResponse {
+    $type: "akash.market.v1beta4.QueryBidsResponse";
+    bids: QueryBidResponse[];
+    pagination: PageResponse | undefined;
+}
+/** QueryBidRequest is request type for the Query/Bid RPC method */
+export interface QueryBidRequest {
+    $type: "akash.market.v1beta4.QueryBidRequest";
+    id: BidID | undefined;
+}
+/** QueryBidResponse is response type for the Query/Bid RPC method */
+export interface QueryBidResponse {
+    $type: "akash.market.v1beta4.QueryBidResponse";
+    bid: Bid | undefined;
+    escrowAccount: Account | undefined;
+}
+/** QueryLeasesRequest is request type for the Query/Leases RPC method */
+export interface QueryLeasesRequest {
+    $type: "akash.market.v1beta4.QueryLeasesRequest";
+    filters: LeaseFilters | undefined;
+    pagination: PageRequest | undefined;
+}
+/** QueryLeasesResponse is response type for the Query/Leases RPC method */
+export interface QueryLeasesResponse {
+    $type: "akash.market.v1beta4.QueryLeasesResponse";
+    leases: QueryLeaseResponse[];
+    pagination: PageResponse | undefined;
+}
+/** QueryLeaseRequest is request type for the Query/Lease RPC method */
+export interface QueryLeaseRequest {
+    $type: "akash.market.v1beta4.QueryLeaseRequest";
+    id: LeaseID | undefined;
+}
+/** QueryLeaseResponse is response type for the Query/Lease RPC method */
+export interface QueryLeaseResponse {
+    $type: "akash.market.v1beta4.QueryLeaseResponse";
+    lease: Lease | undefined;
+    escrowPayment: FractionalPayment | undefined;
+}
+export declare const QueryOrdersRequest: {
+    $type: "akash.market.v1beta4.QueryOrdersRequest";
+    encode(message: QueryOrdersRequest, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrdersRequest;
+    fromJSON(object: any): QueryOrdersRequest;
+    toJSON(message: QueryOrdersRequest): unknown;
+    fromPartial<I extends {
+        pagination?: {
+            key?: Uint8Array | undefined;
+            offset?: string | number | Long.Long | undefined;
+            limit?: string | number | Long.Long | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } | undefined;
+        filters?: {
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        pagination?: ({
+            key?: Uint8Array | undefined;
+            offset?: string | number | Long.Long | undefined;
+            limit?: string | number | Long.Long | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } & {
+            key?: Uint8Array | undefined;
+            offset?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["offset"], "$type" | keyof Long.Long>, never>) | undefined;
+            limit?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["limit"], "$type" | keyof Long.Long>, never>) | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } & Record<Exclude<keyof I["pagination"], "$type" | "key" | "offset" | "limit" | "countTotal" | "reverse">, never>) | undefined;
+        filters?: ({
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["filters"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["filters"], "$type" | "owner" | "state" | "dseq" | "gseq" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "pagination" | "filters">, never>>(object: I): QueryOrdersRequest;
+};
+export declare const QueryOrdersResponse: {
+    $type: "akash.market.v1beta4.QueryOrdersResponse";
+    encode(message: QueryOrdersResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrdersResponse;
+    fromJSON(object: any): QueryOrdersResponse;
+    toJSON(message: QueryOrdersResponse): unknown;
+    fromPartial<I extends {
+        pagination?: {
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | Long.Long | undefined;
+        } | undefined;
+        orders?: {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[] | undefined;
+    } & {
+        pagination?: ({
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | Long.Long | undefined;
+        } & {
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["total"], "$type" | keyof Long.Long>, never>) | undefined;
+        } & Record<Exclude<keyof I["pagination"], "$type" | "nextKey" | "total">, never>) | undefined;
+        orders?: ({
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[] & ({
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        } & {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["orders"][number]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            orderId?: ({
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } & {
+                owner?: string | undefined;
+                dseq?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["orders"][number]["orderId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } & Record<Exclude<keyof I["orders"][number]["orderId"], "$type" | "owner" | "dseq" | "gseq" | "oseq">, never>) | undefined;
+            spec?: ({
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } & {
+                name?: string | undefined;
+                requirements?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    signedBy?: ({
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } & {
+                        allOf?: (string[] & string[] & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["signedBy"]["allOf"], "$type" | keyof string[]>, never>) | undefined;
+                        anyOf?: (string[] & string[] & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["signedBy"]["anyOf"], "$type" | keyof string[]>, never>) | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"]["signedBy"], "$type" | "allOf" | "anyOf">, never>) | undefined;
+                } & Record<Exclude<keyof I["orders"][number]["spec"]["requirements"], "$type" | "attributes" | "signedBy">, never>) | undefined;
+                resources?: ({
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] & ({
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                } & {
+                    count?: number | undefined;
+                    price?: ({
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } & {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+                    resource?: ({
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } & {
+                        storage?: ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] & ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            name?: string | undefined;
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["storage"], "$type" | keyof {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[]>, never>) | undefined;
+                        cpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                        memory?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                        id?: number | undefined;
+                        endpoints?: ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] & ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["endpoints"], "$type" | keyof {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[]>, never>) | undefined;
+                        gpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                    } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number]["resource"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+                } & Record<Exclude<keyof I["orders"][number]["spec"]["resources"][number], "$type" | "count" | "price" | "resource">, never>)[] & Record<Exclude<keyof I["orders"][number]["spec"]["resources"], "$type" | keyof {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[]>, never>) | undefined;
+            } & Record<Exclude<keyof I["orders"][number]["spec"], "$type" | "name" | "requirements" | "resources">, never>) | undefined;
+        } & Record<Exclude<keyof I["orders"][number], "$type" | "state" | "createdAt" | "orderId" | "spec">, never>)[] & Record<Exclude<keyof I["orders"], "$type" | keyof {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[]>, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "pagination" | "orders">, never>>(object: I): QueryOrdersResponse;
+};
+export declare const QueryOrderRequest: {
+    $type: "akash.market.v1beta4.QueryOrderRequest";
+    encode(message: QueryOrderRequest, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrderRequest;
+    fromJSON(object: any): QueryOrderRequest;
+    toJSON(message: QueryOrderRequest): unknown;
+    fromPartial<I extends {
+        id?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        id?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["id"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["id"], "$type" | "owner" | "dseq" | "gseq" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "id">, never>>(object: I): QueryOrderRequest;
+};
+export declare const QueryOrderResponse: {
+    $type: "akash.market.v1beta4.QueryOrderResponse";
+    encode(message: QueryOrderResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryOrderResponse;
+    fromJSON(object: any): QueryOrderResponse;
+    toJSON(message: QueryOrderResponse): unknown;
+    fromPartial<I extends {
+        order?: {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        } | undefined;
+    } & {
+        order?: ({
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            orderId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            spec?: {
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } | undefined;
+        } & {
+            state?: import("./order").Order_State | undefined;
+            createdAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["order"]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            orderId?: ({
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } & {
+                owner?: string | undefined;
+                dseq?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["order"]["orderId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                gseq?: number | undefined;
+                oseq?: number | undefined;
+            } & Record<Exclude<keyof I["order"]["orderId"], "$type" | "owner" | "dseq" | "gseq" | "oseq">, never>) | undefined;
+            spec?: ({
+                name?: string | undefined;
+                requirements?: {
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } | undefined;
+                resources?: {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] | undefined;
+            } & {
+                name?: string | undefined;
+                requirements?: ({
+                    attributes?: {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] | undefined;
+                    signedBy?: {
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } | undefined;
+                } & {
+                    attributes?: ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[] & ({
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    } & Record<Exclude<keyof I["order"]["spec"]["requirements"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["requirements"]["attributes"], "$type" | keyof {
+                        key?: string | undefined;
+                        value?: string | undefined;
+                    }[]>, never>) | undefined;
+                    signedBy?: ({
+                        allOf?: string[] | undefined;
+                        anyOf?: string[] | undefined;
+                    } & {
+                        allOf?: (string[] & string[] & Record<Exclude<keyof I["order"]["spec"]["requirements"]["signedBy"]["allOf"], "$type" | keyof string[]>, never>) | undefined;
+                        anyOf?: (string[] & string[] & Record<Exclude<keyof I["order"]["spec"]["requirements"]["signedBy"]["anyOf"], "$type" | keyof string[]>, never>) | undefined;
+                    } & Record<Exclude<keyof I["order"]["spec"]["requirements"]["signedBy"], "$type" | "allOf" | "anyOf">, never>) | undefined;
+                } & Record<Exclude<keyof I["order"]["spec"]["requirements"], "$type" | "attributes" | "signedBy">, never>) | undefined;
+                resources?: ({
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[] & ({
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                } & {
+                    count?: number | undefined;
+                    price?: ({
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } & {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+                    resource?: ({
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } & {
+                        storage?: ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] & ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            name?: string | undefined;
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["storage"][number]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["storage"], "$type" | keyof {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[]>, never>) | undefined;
+                        cpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["cpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                        memory?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["memory"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                        id?: number | undefined;
+                        endpoints?: ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] & ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["endpoints"], "$type" | keyof {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[]>, never>) | undefined;
+                        gpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["gpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                    } & Record<Exclude<keyof I["order"]["spec"]["resources"][number]["resource"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+                } & Record<Exclude<keyof I["order"]["spec"]["resources"][number], "$type" | "count" | "price" | "resource">, never>)[] & Record<Exclude<keyof I["order"]["spec"]["resources"], "$type" | keyof {
+                    count?: number | undefined;
+                    price?: {
+                        denom?: string | undefined;
+                        amount?: string | undefined;
+                    } | undefined;
+                    resource?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                }[]>, never>) | undefined;
+            } & Record<Exclude<keyof I["order"]["spec"], "$type" | "name" | "requirements" | "resources">, never>) | undefined;
+        } & Record<Exclude<keyof I["order"], "$type" | "state" | "createdAt" | "orderId" | "spec">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "order">, never>>(object: I): QueryOrderResponse;
+};
+export declare const QueryBidsRequest: {
+    $type: "akash.market.v1beta4.QueryBidsRequest";
+    encode(message: QueryBidsRequest, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidsRequest;
+    fromJSON(object: any): QueryBidsRequest;
+    toJSON(message: QueryBidsRequest): unknown;
+    fromPartial<I extends {
+        pagination?: {
+            key?: Uint8Array | undefined;
+            offset?: string | number | Long.Long | undefined;
+            limit?: string | number | Long.Long | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } | undefined;
+        filters?: {
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        pagination?: ({
+            key?: Uint8Array | undefined;
+            offset?: string | number | Long.Long | undefined;
+            limit?: string | number | Long.Long | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } & {
+            key?: Uint8Array | undefined;
+            offset?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["offset"], "$type" | keyof Long.Long>, never>) | undefined;
+            limit?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["limit"], "$type" | keyof Long.Long>, never>) | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } & Record<Exclude<keyof I["pagination"], "$type" | "key" | "offset" | "limit" | "countTotal" | "reverse">, never>) | undefined;
+        filters?: ({
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["filters"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["filters"], "$type" | "owner" | "state" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "pagination" | "filters">, never>>(object: I): QueryBidsRequest;
+};
+export declare const QueryBidsResponse: {
+    $type: "akash.market.v1beta4.QueryBidsResponse";
+    encode(message: QueryBidsResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidsResponse;
+    fromJSON(object: any): QueryBidsResponse;
+    toJSON(message: QueryBidsResponse): unknown;
+    fromPartial<I extends {
+        pagination?: {
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | Long.Long | undefined;
+        } | undefined;
+        bids?: {
+            escrowAccount?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+                id?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                transferred?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                settledAt?: string | number | Long.Long | undefined;
+                depositor?: string | undefined;
+                funds?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+            bid?: {
+                state?: import("./bid").Bid_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                bidId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                resourcesOffer?: {
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[] | undefined;
+    } & {
+        pagination?: ({
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | Long.Long | undefined;
+        } & {
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["total"], "$type" | keyof Long.Long>, never>) | undefined;
+        } & Record<Exclude<keyof I["pagination"], "$type" | "nextKey" | "total">, never>) | undefined;
+        bids?: ({
+            escrowAccount?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+                id?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                transferred?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                settledAt?: string | number | Long.Long | undefined;
+                depositor?: string | undefined;
+                funds?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+            bid?: {
+                state?: import("./bid").Bid_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                bidId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                resourcesOffer?: {
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[] & ({
+            escrowAccount?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+                id?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                transferred?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                settledAt?: string | number | Long.Long | undefined;
+                depositor?: string | undefined;
+                funds?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+            bid?: {
+                state?: import("./bid").Bid_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                bidId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                resourcesOffer?: {
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                }[] | undefined;
+            } | undefined;
+        } & {
+            escrowAccount?: ({
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+                id?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                transferred?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                settledAt?: string | number | Long.Long | undefined;
+                depositor?: string | undefined;
+                funds?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } & {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+                id?: ({
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } & {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["escrowAccount"]["id"], "$type" | "scope" | "xid">, never>) | undefined;
+                balance?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["escrowAccount"]["balance"], "$type" | "denom" | "amount">, never>) | undefined;
+                transferred?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["escrowAccount"]["transferred"], "$type" | "denom" | "amount">, never>) | undefined;
+                settledAt?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["bids"][number]["escrowAccount"]["settledAt"], "$type" | keyof Long.Long>, never>) | undefined;
+                depositor?: string | undefined;
+                funds?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["escrowAccount"]["funds"], "$type" | "denom" | "amount">, never>) | undefined;
+            } & Record<Exclude<keyof I["bids"][number]["escrowAccount"], "$type" | "owner" | "state" | "id" | "balance" | "transferred" | "settledAt" | "depositor" | "funds">, never>) | undefined;
+            bid?: ({
+                state?: import("./bid").Bid_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                bidId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                resourcesOffer?: {
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                }[] | undefined;
+            } & {
+                state?: import("./bid").Bid_State | undefined;
+                createdAt?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["bids"][number]["bid"]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+                price?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["bid"]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+                bidId?: ({
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } & {
+                    owner?: string | undefined;
+                    dseq?: string | number | (Long.Long & {
+                        high: number;
+                        low: number;
+                        unsigned: boolean;
+                        add: (addend: string | number | Long.Long) => Long.Long;
+                        and: (other: string | number | Long.Long) => Long.Long;
+                        compare: (other: string | number | Long.Long) => number;
+                        comp: (other: string | number | Long.Long) => number;
+                        divide: (divisor: string | number | Long.Long) => Long.Long;
+                        div: (divisor: string | number | Long.Long) => Long.Long;
+                        equals: (other: string | number | Long.Long) => boolean;
+                        eq: (other: string | number | Long.Long) => boolean;
+                        getHighBits: () => number;
+                        getHighBitsUnsigned: () => number;
+                        getLowBits: () => number;
+                        getLowBitsUnsigned: () => number;
+                        getNumBitsAbs: () => number;
+                        greaterThan: (other: string | number | Long.Long) => boolean;
+                        gt: (other: string | number | Long.Long) => boolean;
+                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                        gte: (other: string | number | Long.Long) => boolean;
+                        isEven: () => boolean;
+                        isNegative: () => boolean;
+                        isOdd: () => boolean;
+                        isPositive: () => boolean;
+                        isZero: () => boolean;
+                        lessThan: (other: string | number | Long.Long) => boolean;
+                        lt: (other: string | number | Long.Long) => boolean;
+                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                        lte: (other: string | number | Long.Long) => boolean;
+                        modulo: (other: string | number | Long.Long) => Long.Long;
+                        mod: (other: string | number | Long.Long) => Long.Long;
+                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                        mul: (multiplier: string | number | Long.Long) => Long.Long;
+                        negate: () => Long.Long;
+                        neg: () => Long.Long;
+                        not: () => Long.Long;
+                        notEquals: (other: string | number | Long.Long) => boolean;
+                        neq: (other: string | number | Long.Long) => boolean;
+                        or: (other: string | number | Long.Long) => Long.Long;
+                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                        shl: (numBits: number | Long.Long) => Long.Long;
+                        shiftRight: (numBits: number | Long.Long) => Long.Long;
+                        shr: (numBits: number | Long.Long) => Long.Long;
+                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                        shru: (numBits: number | Long.Long) => Long.Long;
+                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                        toInt: () => number;
+                        toNumber: () => number;
+                        toBytes: (le?: boolean | undefined) => number[];
+                        toBytesLE: () => number[];
+                        toBytesBE: () => number[];
+                        toSigned: () => Long.Long;
+                        toString: (radix?: number | undefined) => string;
+                        toUnsigned: () => Long.Long;
+                        xor: (other: string | number | Long.Long) => Long.Long;
+                    } & Record<Exclude<keyof I["bids"][number]["bid"]["bidId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["bid"]["bidId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+                resourcesOffer?: ({
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                }[] & ({
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                } & {
+                    resources?: ({
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } & {
+                        storage?: ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] & ({
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            name?: string | undefined;
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["storage"][number]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["storage"], "$type" | keyof {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[]>, never>) | undefined;
+                        cpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["cpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                        memory?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["memory"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            quantity?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                        id?: number | undefined;
+                        endpoints?: ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] & ({
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["endpoints"], "$type" | keyof {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[]>, never>) | undefined;
+                        gpu?: ({
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } & {
+                            attributes?: ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] & ({
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["gpu"]["attributes"], "$type" | keyof {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[]>, never>) | undefined;
+                            units?: ({
+                                val?: Uint8Array | undefined;
+                            } & {
+                                val?: Uint8Array | undefined;
+                            } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                        } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number]["resources"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+                    count?: number | undefined;
+                } & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"][number], "$type" | "resources" | "count">, never>)[] & Record<Exclude<keyof I["bids"][number]["bid"]["resourcesOffer"], "$type" | keyof {
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                }[]>, never>) | undefined;
+            } & Record<Exclude<keyof I["bids"][number]["bid"], "$type" | "state" | "createdAt" | "price" | "bidId" | "resourcesOffer">, never>) | undefined;
+        } & Record<Exclude<keyof I["bids"][number], "$type" | "escrowAccount" | "bid">, never>)[] & Record<Exclude<keyof I["bids"], "$type" | keyof {
+            escrowAccount?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+                id?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                transferred?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                settledAt?: string | number | Long.Long | undefined;
+                depositor?: string | undefined;
+                funds?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+            bid?: {
+                state?: import("./bid").Bid_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                bidId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                resourcesOffer?: {
+                    resources?: {
+                        storage?: {
+                            name?: string | undefined;
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        }[] | undefined;
+                        cpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        memory?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            quantity?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                        id?: number | undefined;
+                        endpoints?: {
+                            kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                            sequenceNumber?: number | undefined;
+                        }[] | undefined;
+                        gpu?: {
+                            attributes?: {
+                                key?: string | undefined;
+                                value?: string | undefined;
+                            }[] | undefined;
+                            units?: {
+                                val?: Uint8Array | undefined;
+                            } | undefined;
+                        } | undefined;
+                    } | undefined;
+                    count?: number | undefined;
+                }[] | undefined;
+            } | undefined;
+        }[]>, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "pagination" | "bids">, never>>(object: I): QueryBidsResponse;
+};
+export declare const QueryBidRequest: {
+    $type: "akash.market.v1beta4.QueryBidRequest";
+    encode(message: QueryBidRequest, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidRequest;
+    fromJSON(object: any): QueryBidRequest;
+    toJSON(message: QueryBidRequest): unknown;
+    fromPartial<I extends {
+        id?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        id?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["id"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["id"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "id">, never>>(object: I): QueryBidRequest;
+};
+export declare const QueryBidResponse: {
+    $type: "akash.market.v1beta4.QueryBidResponse";
+    encode(message: QueryBidResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBidResponse;
+    fromJSON(object: any): QueryBidResponse;
+    toJSON(message: QueryBidResponse): unknown;
+    fromPartial<I extends {
+        escrowAccount?: {
+            owner?: string | undefined;
+            state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+            id?: {
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } | undefined;
+            balance?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            transferred?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            settledAt?: string | number | Long.Long | undefined;
+            depositor?: string | undefined;
+            funds?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+        } | undefined;
+        bid?: {
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            bidId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            resourcesOffer?: {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] | undefined;
+        } | undefined;
+    } & {
+        escrowAccount?: ({
+            owner?: string | undefined;
+            state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+            id?: {
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } | undefined;
+            balance?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            transferred?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            settledAt?: string | number | Long.Long | undefined;
+            depositor?: string | undefined;
+            funds?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+        } & {
+            owner?: string | undefined;
+            state?: import("../../escrow/v1beta3/types").Account_State | undefined;
+            id?: ({
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } & {
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } & Record<Exclude<keyof I["escrowAccount"]["id"], "$type" | "scope" | "xid">, never>) | undefined;
+            balance?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["escrowAccount"]["balance"], "$type" | "denom" | "amount">, never>) | undefined;
+            transferred?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["escrowAccount"]["transferred"], "$type" | "denom" | "amount">, never>) | undefined;
+            settledAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["escrowAccount"]["settledAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            depositor?: string | undefined;
+            funds?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["escrowAccount"]["funds"], "$type" | "denom" | "amount">, never>) | undefined;
+        } & Record<Exclude<keyof I["escrowAccount"], "$type" | "owner" | "state" | "id" | "balance" | "transferred" | "settledAt" | "depositor" | "funds">, never>) | undefined;
+        bid?: ({
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            bidId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            resourcesOffer?: {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] | undefined;
+        } & {
+            state?: import("./bid").Bid_State | undefined;
+            createdAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["bid"]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            price?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["bid"]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+            bidId?: ({
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & {
+                owner?: string | undefined;
+                dseq?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["bid"]["bidId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & Record<Exclude<keyof I["bid"]["bidId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+            resourcesOffer?: ({
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[] & ({
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            } & {
+                resources?: ({
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } & {
+                    storage?: ({
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] & ({
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        name?: string | undefined;
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["storage"][number]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["storage"][number]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        quantity?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["storage"][number]["quantity"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["storage"][number], "$type" | "name" | "attributes" | "quantity">, never>)[] & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["storage"], "$type" | keyof {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[]>, never>) | undefined;
+                    cpu?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["cpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["cpu"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        units?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["cpu"]["units"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["cpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                    memory?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["memory"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["memory"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        quantity?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["memory"]["quantity"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["memory"], "$type" | "attributes" | "quantity">, never>) | undefined;
+                    id?: number | undefined;
+                    endpoints?: ({
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] & ({
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    } & {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["endpoints"][number], "$type" | "kind" | "sequenceNumber">, never>)[] & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["endpoints"], "$type" | keyof {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[]>, never>) | undefined;
+                    gpu?: ({
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } & {
+                        attributes?: ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] & ({
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["gpu"]["attributes"][number], "$type" | "key" | "value">, never>)[] & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["gpu"]["attributes"], "$type" | keyof {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[]>, never>) | undefined;
+                        units?: ({
+                            val?: Uint8Array | undefined;
+                        } & {
+                            val?: Uint8Array | undefined;
+                        } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["gpu"]["units"], "$type" | "val">, never>) | undefined;
+                    } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"]["gpu"], "$type" | "attributes" | "units">, never>) | undefined;
+                } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number]["resources"], "$type" | "storage" | "cpu" | "memory" | "id" | "endpoints" | "gpu">, never>) | undefined;
+                count?: number | undefined;
+            } & Record<Exclude<keyof I["bid"]["resourcesOffer"][number], "$type" | "resources" | "count">, never>)[] & Record<Exclude<keyof I["bid"]["resourcesOffer"], "$type" | keyof {
+                resources?: {
+                    storage?: {
+                        name?: string | undefined;
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    }[] | undefined;
+                    cpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    memory?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        quantity?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                    id?: number | undefined;
+                    endpoints?: {
+                        kind?: import("../../base/v1beta3/endpoint").Endpoint_Kind | undefined;
+                        sequenceNumber?: number | undefined;
+                    }[] | undefined;
+                    gpu?: {
+                        attributes?: {
+                            key?: string | undefined;
+                            value?: string | undefined;
+                        }[] | undefined;
+                        units?: {
+                            val?: Uint8Array | undefined;
+                        } | undefined;
+                    } | undefined;
+                } | undefined;
+                count?: number | undefined;
+            }[]>, never>) | undefined;
+        } & Record<Exclude<keyof I["bid"], "$type" | "state" | "createdAt" | "price" | "bidId" | "resourcesOffer">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "escrowAccount" | "bid">, never>>(object: I): QueryBidResponse;
+};
+export declare const QueryLeasesRequest: {
+    $type: "akash.market.v1beta4.QueryLeasesRequest";
+    encode(message: QueryLeasesRequest, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLeasesRequest;
+    fromJSON(object: any): QueryLeasesRequest;
+    toJSON(message: QueryLeasesRequest): unknown;
+    fromPartial<I extends {
+        pagination?: {
+            key?: Uint8Array | undefined;
+            offset?: string | number | Long.Long | undefined;
+            limit?: string | number | Long.Long | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } | undefined;
+        filters?: {
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        pagination?: ({
+            key?: Uint8Array | undefined;
+            offset?: string | number | Long.Long | undefined;
+            limit?: string | number | Long.Long | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } & {
+            key?: Uint8Array | undefined;
+            offset?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["offset"], "$type" | keyof Long.Long>, never>) | undefined;
+            limit?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["limit"], "$type" | keyof Long.Long>, never>) | undefined;
+            countTotal?: boolean | undefined;
+            reverse?: boolean | undefined;
+        } & Record<Exclude<keyof I["pagination"], "$type" | "key" | "offset" | "limit" | "countTotal" | "reverse">, never>) | undefined;
+        filters?: ({
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            state?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["filters"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["filters"], "$type" | "owner" | "state" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "pagination" | "filters">, never>>(object: I): QueryLeasesRequest;
+};
+export declare const QueryLeasesResponse: {
+    $type: "akash.market.v1beta4.QueryLeasesResponse";
+    encode(message: QueryLeasesResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLeasesResponse;
+    fromJSON(object: any): QueryLeasesResponse;
+    toJSON(message: QueryLeasesResponse): unknown;
+    fromPartial<I extends {
+        pagination?: {
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | Long.Long | undefined;
+        } | undefined;
+        leases?: {
+            lease?: {
+                state?: import("./lease").Lease_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                leaseId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                closedOn?: string | number | Long.Long | undefined;
+            } | undefined;
+            escrowPayment?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                accountId?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                paymentId?: string | undefined;
+                rate?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                withdrawn?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+        }[] | undefined;
+    } & {
+        pagination?: ({
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | Long.Long | undefined;
+        } & {
+            nextKey?: Uint8Array | undefined;
+            total?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["pagination"]["total"], "$type" | keyof Long.Long>, never>) | undefined;
+        } & Record<Exclude<keyof I["pagination"], "$type" | "nextKey" | "total">, never>) | undefined;
+        leases?: ({
+            lease?: {
+                state?: import("./lease").Lease_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                leaseId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                closedOn?: string | number | Long.Long | undefined;
+            } | undefined;
+            escrowPayment?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                accountId?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                paymentId?: string | undefined;
+                rate?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                withdrawn?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+        }[] & ({
+            lease?: {
+                state?: import("./lease").Lease_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                leaseId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                closedOn?: string | number | Long.Long | undefined;
+            } | undefined;
+            escrowPayment?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                accountId?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                paymentId?: string | undefined;
+                rate?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                withdrawn?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+        } & {
+            lease?: ({
+                state?: import("./lease").Lease_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                leaseId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                closedOn?: string | number | Long.Long | undefined;
+            } & {
+                state?: import("./lease").Lease_State | undefined;
+                createdAt?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["leases"][number]["lease"]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+                price?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["leases"][number]["lease"]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+                leaseId?: ({
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } & {
+                    owner?: string | undefined;
+                    dseq?: string | number | (Long.Long & {
+                        high: number;
+                        low: number;
+                        unsigned: boolean;
+                        add: (addend: string | number | Long.Long) => Long.Long;
+                        and: (other: string | number | Long.Long) => Long.Long;
+                        compare: (other: string | number | Long.Long) => number;
+                        comp: (other: string | number | Long.Long) => number;
+                        divide: (divisor: string | number | Long.Long) => Long.Long;
+                        div: (divisor: string | number | Long.Long) => Long.Long;
+                        equals: (other: string | number | Long.Long) => boolean;
+                        eq: (other: string | number | Long.Long) => boolean;
+                        getHighBits: () => number;
+                        getHighBitsUnsigned: () => number;
+                        getLowBits: () => number;
+                        getLowBitsUnsigned: () => number;
+                        getNumBitsAbs: () => number;
+                        greaterThan: (other: string | number | Long.Long) => boolean;
+                        gt: (other: string | number | Long.Long) => boolean;
+                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                        gte: (other: string | number | Long.Long) => boolean;
+                        isEven: () => boolean;
+                        isNegative: () => boolean;
+                        isOdd: () => boolean;
+                        isPositive: () => boolean;
+                        isZero: () => boolean;
+                        lessThan: (other: string | number | Long.Long) => boolean;
+                        lt: (other: string | number | Long.Long) => boolean;
+                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                        lte: (other: string | number | Long.Long) => boolean;
+                        modulo: (other: string | number | Long.Long) => Long.Long;
+                        mod: (other: string | number | Long.Long) => Long.Long;
+                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                        mul: (multiplier: string | number | Long.Long) => Long.Long;
+                        negate: () => Long.Long;
+                        neg: () => Long.Long;
+                        not: () => Long.Long;
+                        notEquals: (other: string | number | Long.Long) => boolean;
+                        neq: (other: string | number | Long.Long) => boolean;
+                        or: (other: string | number | Long.Long) => Long.Long;
+                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                        shl: (numBits: number | Long.Long) => Long.Long;
+                        shiftRight: (numBits: number | Long.Long) => Long.Long;
+                        shr: (numBits: number | Long.Long) => Long.Long;
+                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                        shru: (numBits: number | Long.Long) => Long.Long;
+                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                        toInt: () => number;
+                        toNumber: () => number;
+                        toBytes: (le?: boolean | undefined) => number[];
+                        toBytesLE: () => number[];
+                        toBytesBE: () => number[];
+                        toSigned: () => Long.Long;
+                        toString: (radix?: number | undefined) => string;
+                        toUnsigned: () => Long.Long;
+                        xor: (other: string | number | Long.Long) => Long.Long;
+                    } & Record<Exclude<keyof I["leases"][number]["lease"]["leaseId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } & Record<Exclude<keyof I["leases"][number]["lease"]["leaseId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+                closedOn?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["leases"][number]["lease"]["closedOn"], "$type" | keyof Long.Long>, never>) | undefined;
+            } & Record<Exclude<keyof I["leases"][number]["lease"], "$type" | "state" | "createdAt" | "price" | "leaseId" | "closedOn">, never>) | undefined;
+            escrowPayment?: ({
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                accountId?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                paymentId?: string | undefined;
+                rate?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                withdrawn?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } & {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+                balance?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["leases"][number]["escrowPayment"]["balance"], "$type" | "denom" | "amount">, never>) | undefined;
+                accountId?: ({
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } & {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } & Record<Exclude<keyof I["leases"][number]["escrowPayment"]["accountId"], "$type" | "scope" | "xid">, never>) | undefined;
+                paymentId?: string | undefined;
+                rate?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["leases"][number]["escrowPayment"]["rate"], "$type" | "denom" | "amount">, never>) | undefined;
+                withdrawn?: ({
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } & Record<Exclude<keyof I["leases"][number]["escrowPayment"]["withdrawn"], "$type" | "denom" | "amount">, never>) | undefined;
+            } & Record<Exclude<keyof I["leases"][number]["escrowPayment"], "$type" | "owner" | "state" | "balance" | "accountId" | "paymentId" | "rate" | "withdrawn">, never>) | undefined;
+        } & Record<Exclude<keyof I["leases"][number], "$type" | "lease" | "escrowPayment">, never>)[] & Record<Exclude<keyof I["leases"], "$type" | keyof {
+            lease?: {
+                state?: import("./lease").Lease_State | undefined;
+                createdAt?: string | number | Long.Long | undefined;
+                price?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                leaseId?: {
+                    owner?: string | undefined;
+                    dseq?: string | number | Long.Long | undefined;
+                    gseq?: number | undefined;
+                    provider?: string | undefined;
+                    oseq?: number | undefined;
+                } | undefined;
+                closedOn?: string | number | Long.Long | undefined;
+            } | undefined;
+            escrowPayment?: {
+                owner?: string | undefined;
+                state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+                balance?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                accountId?: {
+                    scope?: string | undefined;
+                    xid?: string | undefined;
+                } | undefined;
+                paymentId?: string | undefined;
+                rate?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+                withdrawn?: {
+                    denom?: string | undefined;
+                    amount?: string | undefined;
+                } | undefined;
+            } | undefined;
+        }[]>, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "pagination" | "leases">, never>>(object: I): QueryLeasesResponse;
+};
+export declare const QueryLeaseRequest: {
+    $type: "akash.market.v1beta4.QueryLeaseRequest";
+    encode(message: QueryLeaseRequest, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLeaseRequest;
+    fromJSON(object: any): QueryLeaseRequest;
+    toJSON(message: QueryLeaseRequest): unknown;
+    fromPartial<I extends {
+        id?: {
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } | undefined;
+    } & {
+        id?: ({
+            owner?: string | undefined;
+            dseq?: string | number | Long.Long | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & {
+            owner?: string | undefined;
+            dseq?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["id"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+            gseq?: number | undefined;
+            provider?: string | undefined;
+            oseq?: number | undefined;
+        } & Record<Exclude<keyof I["id"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "id">, never>>(object: I): QueryLeaseRequest;
+};
+export declare const QueryLeaseResponse: {
+    $type: "akash.market.v1beta4.QueryLeaseResponse";
+    encode(message: QueryLeaseResponse, writer?: _m0.Writer): _m0.Writer;
+    decode(input: _m0.Reader | Uint8Array, length?: number): QueryLeaseResponse;
+    fromJSON(object: any): QueryLeaseResponse;
+    toJSON(message: QueryLeaseResponse): unknown;
+    fromPartial<I extends {
+        lease?: {
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            leaseId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            closedOn?: string | number | Long.Long | undefined;
+        } | undefined;
+        escrowPayment?: {
+            owner?: string | undefined;
+            state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+            balance?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            accountId?: {
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } | undefined;
+            paymentId?: string | undefined;
+            rate?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            withdrawn?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+        } | undefined;
+    } & {
+        lease?: ({
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | Long.Long | undefined;
+            price?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            leaseId?: {
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } | undefined;
+            closedOn?: string | number | Long.Long | undefined;
+        } & {
+            state?: import("./lease").Lease_State | undefined;
+            createdAt?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["lease"]["createdAt"], "$type" | keyof Long.Long>, never>) | undefined;
+            price?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["lease"]["price"], "$type" | "denom" | "amount">, never>) | undefined;
+            leaseId?: ({
+                owner?: string | undefined;
+                dseq?: string | number | Long.Long | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & {
+                owner?: string | undefined;
+                dseq?: string | number | (Long.Long & {
+                    high: number;
+                    low: number;
+                    unsigned: boolean;
+                    add: (addend: string | number | Long.Long) => Long.Long;
+                    and: (other: string | number | Long.Long) => Long.Long;
+                    compare: (other: string | number | Long.Long) => number;
+                    comp: (other: string | number | Long.Long) => number;
+                    divide: (divisor: string | number | Long.Long) => Long.Long;
+                    div: (divisor: string | number | Long.Long) => Long.Long;
+                    equals: (other: string | number | Long.Long) => boolean;
+                    eq: (other: string | number | Long.Long) => boolean;
+                    getHighBits: () => number;
+                    getHighBitsUnsigned: () => number;
+                    getLowBits: () => number;
+                    getLowBitsUnsigned: () => number;
+                    getNumBitsAbs: () => number;
+                    greaterThan: (other: string | number | Long.Long) => boolean;
+                    gt: (other: string | number | Long.Long) => boolean;
+                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    gte: (other: string | number | Long.Long) => boolean;
+                    isEven: () => boolean;
+                    isNegative: () => boolean;
+                    isOdd: () => boolean;
+                    isPositive: () => boolean;
+                    isZero: () => boolean;
+                    lessThan: (other: string | number | Long.Long) => boolean;
+                    lt: (other: string | number | Long.Long) => boolean;
+                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                    lte: (other: string | number | Long.Long) => boolean;
+                    modulo: (other: string | number | Long.Long) => Long.Long;
+                    mod: (other: string | number | Long.Long) => Long.Long;
+                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                    mul: (multiplier: string | number | Long.Long) => Long.Long;
+                    negate: () => Long.Long;
+                    neg: () => Long.Long;
+                    not: () => Long.Long;
+                    notEquals: (other: string | number | Long.Long) => boolean;
+                    neq: (other: string | number | Long.Long) => boolean;
+                    or: (other: string | number | Long.Long) => Long.Long;
+                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                    shl: (numBits: number | Long.Long) => Long.Long;
+                    shiftRight: (numBits: number | Long.Long) => Long.Long;
+                    shr: (numBits: number | Long.Long) => Long.Long;
+                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                    shru: (numBits: number | Long.Long) => Long.Long;
+                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                    toInt: () => number;
+                    toNumber: () => number;
+                    toBytes: (le?: boolean | undefined) => number[];
+                    toBytesLE: () => number[];
+                    toBytesBE: () => number[];
+                    toSigned: () => Long.Long;
+                    toString: (radix?: number | undefined) => string;
+                    toUnsigned: () => Long.Long;
+                    xor: (other: string | number | Long.Long) => Long.Long;
+                } & Record<Exclude<keyof I["lease"]["leaseId"]["dseq"], "$type" | keyof Long.Long>, never>) | undefined;
+                gseq?: number | undefined;
+                provider?: string | undefined;
+                oseq?: number | undefined;
+            } & Record<Exclude<keyof I["lease"]["leaseId"], "$type" | "owner" | "dseq" | "gseq" | "provider" | "oseq">, never>) | undefined;
+            closedOn?: string | number | (Long.Long & {
+                high: number;
+                low: number;
+                unsigned: boolean;
+                add: (addend: string | number | Long.Long) => Long.Long;
+                and: (other: string | number | Long.Long) => Long.Long;
+                compare: (other: string | number | Long.Long) => number;
+                comp: (other: string | number | Long.Long) => number;
+                divide: (divisor: string | number | Long.Long) => Long.Long;
+                div: (divisor: string | number | Long.Long) => Long.Long;
+                equals: (other: string | number | Long.Long) => boolean;
+                eq: (other: string | number | Long.Long) => boolean;
+                getHighBits: () => number;
+                getHighBitsUnsigned: () => number;
+                getLowBits: () => number;
+                getLowBitsUnsigned: () => number;
+                getNumBitsAbs: () => number;
+                greaterThan: (other: string | number | Long.Long) => boolean;
+                gt: (other: string | number | Long.Long) => boolean;
+                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
+                gte: (other: string | number | Long.Long) => boolean;
+                isEven: () => boolean;
+                isNegative: () => boolean;
+                isOdd: () => boolean;
+                isPositive: () => boolean;
+                isZero: () => boolean;
+                lessThan: (other: string | number | Long.Long) => boolean;
+                lt: (other: string | number | Long.Long) => boolean;
+                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
+                lte: (other: string | number | Long.Long) => boolean;
+                modulo: (other: string | number | Long.Long) => Long.Long;
+                mod: (other: string | number | Long.Long) => Long.Long;
+                multiply: (multiplier: string | number | Long.Long) => Long.Long;
+                mul: (multiplier: string | number | Long.Long) => Long.Long;
+                negate: () => Long.Long;
+                neg: () => Long.Long;
+                not: () => Long.Long;
+                notEquals: (other: string | number | Long.Long) => boolean;
+                neq: (other: string | number | Long.Long) => boolean;
+                or: (other: string | number | Long.Long) => Long.Long;
+                shiftLeft: (numBits: number | Long.Long) => Long.Long;
+                shl: (numBits: number | Long.Long) => Long.Long;
+                shiftRight: (numBits: number | Long.Long) => Long.Long;
+                shr: (numBits: number | Long.Long) => Long.Long;
+                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
+                shru: (numBits: number | Long.Long) => Long.Long;
+                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
+                sub: (subtrahend: string | number | Long.Long) => Long.Long;
+                toInt: () => number;
+                toNumber: () => number;
+                toBytes: (le?: boolean | undefined) => number[];
+                toBytesLE: () => number[];
+                toBytesBE: () => number[];
+                toSigned: () => Long.Long;
+                toString: (radix?: number | undefined) => string;
+                toUnsigned: () => Long.Long;
+                xor: (other: string | number | Long.Long) => Long.Long;
+            } & Record<Exclude<keyof I["lease"]["closedOn"], "$type" | keyof Long.Long>, never>) | undefined;
+        } & Record<Exclude<keyof I["lease"], "$type" | "state" | "createdAt" | "price" | "leaseId" | "closedOn">, never>) | undefined;
+        escrowPayment?: ({
+            owner?: string | undefined;
+            state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+            balance?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            accountId?: {
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } | undefined;
+            paymentId?: string | undefined;
+            rate?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+            withdrawn?: {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } | undefined;
+        } & {
+            owner?: string | undefined;
+            state?: import("../../escrow/v1beta3/types").FractionalPayment_State | undefined;
+            balance?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["escrowPayment"]["balance"], "$type" | "denom" | "amount">, never>) | undefined;
+            accountId?: ({
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } & {
+                scope?: string | undefined;
+                xid?: string | undefined;
+            } & Record<Exclude<keyof I["escrowPayment"]["accountId"], "$type" | "scope" | "xid">, never>) | undefined;
+            paymentId?: string | undefined;
+            rate?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["escrowPayment"]["rate"], "$type" | "denom" | "amount">, never>) | undefined;
+            withdrawn?: ({
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & {
+                denom?: string | undefined;
+                amount?: string | undefined;
+            } & Record<Exclude<keyof I["escrowPayment"]["withdrawn"], "$type" | "denom" | "amount">, never>) | undefined;
+        } & Record<Exclude<keyof I["escrowPayment"], "$type" | "owner" | "state" | "balance" | "accountId" | "paymentId" | "rate" | "withdrawn">, never>) | undefined;
+    } & Record<Exclude<keyof I, "$type" | "lease" | "escrowPayment">, never>>(object: I): QueryLeaseResponse;
+};
+/** Query defines the gRPC querier service */
+export interface Query {
+    /** Orders queries orders with filters */
+    Orders(request: QueryOrdersRequest): Promise<QueryOrdersResponse>;
+    /** Order queries order details */
+    Order(request: QueryOrderRequest): Promise<QueryOrderResponse>;
+    /** Bids queries bids with filters */
+    Bids(request: QueryBidsRequest): Promise<QueryBidsResponse>;
+    /** Bid queries bid details */
+    Bid(request: QueryBidRequest): Promise<QueryBidResponse>;
+    /** Leases queries leases with filters */
+    Leases(request: QueryLeasesRequest): Promise<QueryLeasesResponse>;
+    /** Lease queries lease details */
+    Lease(request: QueryLeaseRequest): Promise<QueryLeaseResponse>;
+}
+export declare class QueryClientImpl implements Query {
+    private readonly rpc;
+    constructor(rpc: Rpc);
+    Orders(request: QueryOrdersRequest): Promise<QueryOrdersResponse>;
+    Order(request: QueryOrderRequest): Promise<QueryOrderResponse>;
+    Bids(request: QueryBidsRequest): Promise<QueryBidsResponse>;
+    Bid(request: QueryBidRequest): Promise<QueryBidResponse>;
+    Leases(request: QueryLeasesRequest): Promise<QueryLeasesResponse>;
+    Lease(request: QueryLeaseRequest): Promise<QueryLeaseResponse>;
+}
+interface Rpc {
+    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
+}
+declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
+export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
+    [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]>;
+} : Partial<T>;
+declare type KeysOfUnion<T> = T extends T ? keyof T : never;
+export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
+    [K in keyof P]: Exact<P[K], I[K]>;
+} & Record<Exclude<keyof I, KeysOfUnion<P> | "$type">, never>;
+export {};
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/query.js b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/query.js
new file mode 100644
index 0000000..3c89a34
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/query.js
@@ -0,0 +1,879 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.QueryClientImpl = exports.QueryLeaseResponse = exports.QueryLeaseRequest = exports.QueryLeasesResponse = exports.QueryLeasesRequest = exports.QueryBidResponse = exports.QueryBidRequest = exports.QueryBidsResponse = exports.QueryBidsRequest = exports.QueryOrderResponse = exports.QueryOrderRequest = exports.QueryOrdersResponse = exports.QueryOrdersRequest = exports.protobufPackage = void 0;
+/* eslint-disable */
+const typeRegistry_1 = require("../../../typeRegistry");
+const long_1 = __importDefault(require("long"));
+const order_1 = require("./order");
+const pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
+const bid_1 = require("./bid");
+const types_1 = require("../../escrow/v1beta3/types");
+const lease_1 = require("./lease");
+const _m0 = __importStar(require("protobufjs/minimal"));
+exports.protobufPackage = "akash.market.v1beta4";
+function createBaseQueryOrdersRequest() {
+    return {
+        $type: "akash.market.v1beta4.QueryOrdersRequest",
+        filters: undefined,
+        pagination: undefined,
+    };
+}
+exports.QueryOrdersRequest = {
+    $type: "akash.market.v1beta4.QueryOrdersRequest",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.filters !== undefined) {
+            order_1.OrderFilters.encode(message.filters, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.pagination !== undefined) {
+            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryOrdersRequest();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.filters = order_1.OrderFilters.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryOrdersRequest.$type,
+            filters: isSet(object.filters)
+                ? order_1.OrderFilters.fromJSON(object.filters)
+                : undefined,
+            pagination: isSet(object.pagination)
+                ? pagination_1.PageRequest.fromJSON(object.pagination)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.filters !== undefined &&
+            (obj.filters = message.filters
+                ? order_1.OrderFilters.toJSON(message.filters)
+                : undefined);
+        message.pagination !== undefined &&
+            (obj.pagination = message.pagination
+                ? pagination_1.PageRequest.toJSON(message.pagination)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryOrdersRequest();
+        message.filters =
+            object.filters !== undefined && object.filters !== null
+                ? order_1.OrderFilters.fromPartial(object.filters)
+                : undefined;
+        message.pagination =
+            object.pagination !== undefined && object.pagination !== null
+                ? pagination_1.PageRequest.fromPartial(object.pagination)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryOrdersRequest.$type, exports.QueryOrdersRequest);
+function createBaseQueryOrdersResponse() {
+    return {
+        $type: "akash.market.v1beta4.QueryOrdersResponse",
+        orders: [],
+        pagination: undefined,
+    };
+}
+exports.QueryOrdersResponse = {
+    $type: "akash.market.v1beta4.QueryOrdersResponse",
+    encode(message, writer = _m0.Writer.create()) {
+        for (const v of message.orders) {
+            order_1.Order.encode(v, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.pagination !== undefined) {
+            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryOrdersResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.orders.push(order_1.Order.decode(reader, reader.uint32()));
+                    break;
+                case 2:
+                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryOrdersResponse.$type,
+            orders: Array.isArray(object?.orders)
+                ? object.orders.map((e) => order_1.Order.fromJSON(e))
+                : [],
+            pagination: isSet(object.pagination)
+                ? pagination_1.PageResponse.fromJSON(object.pagination)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        if (message.orders) {
+            obj.orders = message.orders.map((e) => (e ? order_1.Order.toJSON(e) : undefined));
+        }
+        else {
+            obj.orders = [];
+        }
+        message.pagination !== undefined &&
+            (obj.pagination = message.pagination
+                ? pagination_1.PageResponse.toJSON(message.pagination)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryOrdersResponse();
+        message.orders = object.orders?.map((e) => order_1.Order.fromPartial(e)) || [];
+        message.pagination =
+            object.pagination !== undefined && object.pagination !== null
+                ? pagination_1.PageResponse.fromPartial(object.pagination)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryOrdersResponse.$type, exports.QueryOrdersResponse);
+function createBaseQueryOrderRequest() {
+    return { $type: "akash.market.v1beta4.QueryOrderRequest", id: undefined };
+}
+exports.QueryOrderRequest = {
+    $type: "akash.market.v1beta4.QueryOrderRequest",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.id !== undefined) {
+            order_1.OrderID.encode(message.id, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryOrderRequest();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.id = order_1.OrderID.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryOrderRequest.$type,
+            id: isSet(object.id) ? order_1.OrderID.fromJSON(object.id) : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.id !== undefined &&
+            (obj.id = message.id ? order_1.OrderID.toJSON(message.id) : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryOrderRequest();
+        message.id =
+            object.id !== undefined && object.id !== null
+                ? order_1.OrderID.fromPartial(object.id)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryOrderRequest.$type, exports.QueryOrderRequest);
+function createBaseQueryOrderResponse() {
+    return { $type: "akash.market.v1beta4.QueryOrderResponse", order: undefined };
+}
+exports.QueryOrderResponse = {
+    $type: "akash.market.v1beta4.QueryOrderResponse",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.order !== undefined) {
+            order_1.Order.encode(message.order, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryOrderResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.order = order_1.Order.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryOrderResponse.$type,
+            order: isSet(object.order) ? order_1.Order.fromJSON(object.order) : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.order !== undefined &&
+            (obj.order = message.order ? order_1.Order.toJSON(message.order) : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryOrderResponse();
+        message.order =
+            object.order !== undefined && object.order !== null
+                ? order_1.Order.fromPartial(object.order)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryOrderResponse.$type, exports.QueryOrderResponse);
+function createBaseQueryBidsRequest() {
+    return {
+        $type: "akash.market.v1beta4.QueryBidsRequest",
+        filters: undefined,
+        pagination: undefined,
+    };
+}
+exports.QueryBidsRequest = {
+    $type: "akash.market.v1beta4.QueryBidsRequest",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.filters !== undefined) {
+            bid_1.BidFilters.encode(message.filters, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.pagination !== undefined) {
+            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryBidsRequest();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.filters = bid_1.BidFilters.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryBidsRequest.$type,
+            filters: isSet(object.filters)
+                ? bid_1.BidFilters.fromJSON(object.filters)
+                : undefined,
+            pagination: isSet(object.pagination)
+                ? pagination_1.PageRequest.fromJSON(object.pagination)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.filters !== undefined &&
+            (obj.filters = message.filters
+                ? bid_1.BidFilters.toJSON(message.filters)
+                : undefined);
+        message.pagination !== undefined &&
+            (obj.pagination = message.pagination
+                ? pagination_1.PageRequest.toJSON(message.pagination)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryBidsRequest();
+        message.filters =
+            object.filters !== undefined && object.filters !== null
+                ? bid_1.BidFilters.fromPartial(object.filters)
+                : undefined;
+        message.pagination =
+            object.pagination !== undefined && object.pagination !== null
+                ? pagination_1.PageRequest.fromPartial(object.pagination)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryBidsRequest.$type, exports.QueryBidsRequest);
+function createBaseQueryBidsResponse() {
+    return {
+        $type: "akash.market.v1beta4.QueryBidsResponse",
+        bids: [],
+        pagination: undefined,
+    };
+}
+exports.QueryBidsResponse = {
+    $type: "akash.market.v1beta4.QueryBidsResponse",
+    encode(message, writer = _m0.Writer.create()) {
+        for (const v of message.bids) {
+            exports.QueryBidResponse.encode(v, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.pagination !== undefined) {
+            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryBidsResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.bids.push(exports.QueryBidResponse.decode(reader, reader.uint32()));
+                    break;
+                case 2:
+                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryBidsResponse.$type,
+            bids: Array.isArray(object?.bids)
+                ? object.bids.map((e) => exports.QueryBidResponse.fromJSON(e))
+                : [],
+            pagination: isSet(object.pagination)
+                ? pagination_1.PageResponse.fromJSON(object.pagination)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        if (message.bids) {
+            obj.bids = message.bids.map((e) => e ? exports.QueryBidResponse.toJSON(e) : undefined);
+        }
+        else {
+            obj.bids = [];
+        }
+        message.pagination !== undefined &&
+            (obj.pagination = message.pagination
+                ? pagination_1.PageResponse.toJSON(message.pagination)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryBidsResponse();
+        message.bids =
+            object.bids?.map((e) => exports.QueryBidResponse.fromPartial(e)) || [];
+        message.pagination =
+            object.pagination !== undefined && object.pagination !== null
+                ? pagination_1.PageResponse.fromPartial(object.pagination)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryBidsResponse.$type, exports.QueryBidsResponse);
+function createBaseQueryBidRequest() {
+    return { $type: "akash.market.v1beta4.QueryBidRequest", id: undefined };
+}
+exports.QueryBidRequest = {
+    $type: "akash.market.v1beta4.QueryBidRequest",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.id !== undefined) {
+            bid_1.BidID.encode(message.id, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryBidRequest();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.id = bid_1.BidID.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryBidRequest.$type,
+            id: isSet(object.id) ? bid_1.BidID.fromJSON(object.id) : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.id !== undefined &&
+            (obj.id = message.id ? bid_1.BidID.toJSON(message.id) : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryBidRequest();
+        message.id =
+            object.id !== undefined && object.id !== null
+                ? bid_1.BidID.fromPartial(object.id)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryBidRequest.$type, exports.QueryBidRequest);
+function createBaseQueryBidResponse() {
+    return {
+        $type: "akash.market.v1beta4.QueryBidResponse",
+        bid: undefined,
+        escrowAccount: undefined,
+    };
+}
+exports.QueryBidResponse = {
+    $type: "akash.market.v1beta4.QueryBidResponse",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.bid !== undefined) {
+            bid_1.Bid.encode(message.bid, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.escrowAccount !== undefined) {
+            types_1.Account.encode(message.escrowAccount, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryBidResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.bid = bid_1.Bid.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.escrowAccount = types_1.Account.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryBidResponse.$type,
+            bid: isSet(object.bid) ? bid_1.Bid.fromJSON(object.bid) : undefined,
+            escrowAccount: isSet(object.escrowAccount)
+                ? types_1.Account.fromJSON(object.escrowAccount)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.bid !== undefined &&
+            (obj.bid = message.bid ? bid_1.Bid.toJSON(message.bid) : undefined);
+        message.escrowAccount !== undefined &&
+            (obj.escrowAccount = message.escrowAccount
+                ? types_1.Account.toJSON(message.escrowAccount)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryBidResponse();
+        message.bid =
+            object.bid !== undefined && object.bid !== null
+                ? bid_1.Bid.fromPartial(object.bid)
+                : undefined;
+        message.escrowAccount =
+            object.escrowAccount !== undefined && object.escrowAccount !== null
+                ? types_1.Account.fromPartial(object.escrowAccount)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryBidResponse.$type, exports.QueryBidResponse);
+function createBaseQueryLeasesRequest() {
+    return {
+        $type: "akash.market.v1beta4.QueryLeasesRequest",
+        filters: undefined,
+        pagination: undefined,
+    };
+}
+exports.QueryLeasesRequest = {
+    $type: "akash.market.v1beta4.QueryLeasesRequest",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.filters !== undefined) {
+            lease_1.LeaseFilters.encode(message.filters, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.pagination !== undefined) {
+            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryLeasesRequest();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.filters = lease_1.LeaseFilters.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryLeasesRequest.$type,
+            filters: isSet(object.filters)
+                ? lease_1.LeaseFilters.fromJSON(object.filters)
+                : undefined,
+            pagination: isSet(object.pagination)
+                ? pagination_1.PageRequest.fromJSON(object.pagination)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.filters !== undefined &&
+            (obj.filters = message.filters
+                ? lease_1.LeaseFilters.toJSON(message.filters)
+                : undefined);
+        message.pagination !== undefined &&
+            (obj.pagination = message.pagination
+                ? pagination_1.PageRequest.toJSON(message.pagination)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryLeasesRequest();
+        message.filters =
+            object.filters !== undefined && object.filters !== null
+                ? lease_1.LeaseFilters.fromPartial(object.filters)
+                : undefined;
+        message.pagination =
+            object.pagination !== undefined && object.pagination !== null
+                ? pagination_1.PageRequest.fromPartial(object.pagination)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryLeasesRequest.$type, exports.QueryLeasesRequest);
+function createBaseQueryLeasesResponse() {
+    return {
+        $type: "akash.market.v1beta4.QueryLeasesResponse",
+        leases: [],
+        pagination: undefined,
+    };
+}
+exports.QueryLeasesResponse = {
+    $type: "akash.market.v1beta4.QueryLeasesResponse",
+    encode(message, writer = _m0.Writer.create()) {
+        for (const v of message.leases) {
+            exports.QueryLeaseResponse.encode(v, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.pagination !== undefined) {
+            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryLeasesResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.leases.push(exports.QueryLeaseResponse.decode(reader, reader.uint32()));
+                    break;
+                case 2:
+                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryLeasesResponse.$type,
+            leases: Array.isArray(object?.leases)
+                ? object.leases.map((e) => exports.QueryLeaseResponse.fromJSON(e))
+                : [],
+            pagination: isSet(object.pagination)
+                ? pagination_1.PageResponse.fromJSON(object.pagination)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        if (message.leases) {
+            obj.leases = message.leases.map((e) => e ? exports.QueryLeaseResponse.toJSON(e) : undefined);
+        }
+        else {
+            obj.leases = [];
+        }
+        message.pagination !== undefined &&
+            (obj.pagination = message.pagination
+                ? pagination_1.PageResponse.toJSON(message.pagination)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryLeasesResponse();
+        message.leases =
+            object.leases?.map((e) => exports.QueryLeaseResponse.fromPartial(e)) || [];
+        message.pagination =
+            object.pagination !== undefined && object.pagination !== null
+                ? pagination_1.PageResponse.fromPartial(object.pagination)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryLeasesResponse.$type, exports.QueryLeasesResponse);
+function createBaseQueryLeaseRequest() {
+    return { $type: "akash.market.v1beta4.QueryLeaseRequest", id: undefined };
+}
+exports.QueryLeaseRequest = {
+    $type: "akash.market.v1beta4.QueryLeaseRequest",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.id !== undefined) {
+            lease_1.LeaseID.encode(message.id, writer.uint32(10).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryLeaseRequest();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.id = lease_1.LeaseID.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryLeaseRequest.$type,
+            id: isSet(object.id) ? lease_1.LeaseID.fromJSON(object.id) : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.id !== undefined &&
+            (obj.id = message.id ? lease_1.LeaseID.toJSON(message.id) : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryLeaseRequest();
+        message.id =
+            object.id !== undefined && object.id !== null
+                ? lease_1.LeaseID.fromPartial(object.id)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryLeaseRequest.$type, exports.QueryLeaseRequest);
+function createBaseQueryLeaseResponse() {
+    return {
+        $type: "akash.market.v1beta4.QueryLeaseResponse",
+        lease: undefined,
+        escrowPayment: undefined,
+    };
+}
+exports.QueryLeaseResponse = {
+    $type: "akash.market.v1beta4.QueryLeaseResponse",
+    encode(message, writer = _m0.Writer.create()) {
+        if (message.lease !== undefined) {
+            lease_1.Lease.encode(message.lease, writer.uint32(10).fork()).ldelim();
+        }
+        if (message.escrowPayment !== undefined) {
+            types_1.FractionalPayment.encode(message.escrowPayment, writer.uint32(18).fork()).ldelim();
+        }
+        return writer;
+    },
+    decode(input, length) {
+        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
+        let end = length === undefined ? reader.len : reader.pos + length;
+        const message = createBaseQueryLeaseResponse();
+        while (reader.pos < end) {
+            const tag = reader.uint32();
+            switch (tag >>> 3) {
+                case 1:
+                    message.lease = lease_1.Lease.decode(reader, reader.uint32());
+                    break;
+                case 2:
+                    message.escrowPayment = types_1.FractionalPayment.decode(reader, reader.uint32());
+                    break;
+                default:
+                    reader.skipType(tag & 7);
+                    break;
+            }
+        }
+        return message;
+    },
+    fromJSON(object) {
+        return {
+            $type: exports.QueryLeaseResponse.$type,
+            lease: isSet(object.lease) ? lease_1.Lease.fromJSON(object.lease) : undefined,
+            escrowPayment: isSet(object.escrowPayment)
+                ? types_1.FractionalPayment.fromJSON(object.escrowPayment)
+                : undefined,
+        };
+    },
+    toJSON(message) {
+        const obj = {};
+        message.lease !== undefined &&
+            (obj.lease = message.lease ? lease_1.Lease.toJSON(message.lease) : undefined);
+        message.escrowPayment !== undefined &&
+            (obj.escrowPayment = message.escrowPayment
+                ? types_1.FractionalPayment.toJSON(message.escrowPayment)
+                : undefined);
+        return obj;
+    },
+    fromPartial(object) {
+        const message = createBaseQueryLeaseResponse();
+        message.lease =
+            object.lease !== undefined && object.lease !== null
+                ? lease_1.Lease.fromPartial(object.lease)
+                : undefined;
+        message.escrowPayment =
+            object.escrowPayment !== undefined && object.escrowPayment !== null
+                ? types_1.FractionalPayment.fromPartial(object.escrowPayment)
+                : undefined;
+        return message;
+    },
+};
+typeRegistry_1.messageTypeRegistry.set(exports.QueryLeaseResponse.$type, exports.QueryLeaseResponse);
+class QueryClientImpl {
+    constructor(rpc) {
+        this.rpc = rpc;
+        this.Orders = this.Orders.bind(this);
+        this.Order = this.Order.bind(this);
+        this.Bids = this.Bids.bind(this);
+        this.Bid = this.Bid.bind(this);
+        this.Leases = this.Leases.bind(this);
+        this.Lease = this.Lease.bind(this);
+    }
+    Orders(request) {
+        const data = exports.QueryOrdersRequest.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Query", "Orders", data);
+        return promise.then((data) => exports.QueryOrdersResponse.decode(new _m0.Reader(data)));
+    }
+    Order(request) {
+        const data = exports.QueryOrderRequest.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Query", "Order", data);
+        return promise.then((data) => exports.QueryOrderResponse.decode(new _m0.Reader(data)));
+    }
+    Bids(request) {
+        const data = exports.QueryBidsRequest.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Query", "Bids", data);
+        return promise.then((data) => exports.QueryBidsResponse.decode(new _m0.Reader(data)));
+    }
+    Bid(request) {
+        const data = exports.QueryBidRequest.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Query", "Bid", data);
+        return promise.then((data) => exports.QueryBidResponse.decode(new _m0.Reader(data)));
+    }
+    Leases(request) {
+        const data = exports.QueryLeasesRequest.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Query", "Leases", data);
+        return promise.then((data) => exports.QueryLeasesResponse.decode(new _m0.Reader(data)));
+    }
+    Lease(request) {
+        const data = exports.QueryLeaseRequest.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Query", "Lease", data);
+        return promise.then((data) => exports.QueryLeaseResponse.decode(new _m0.Reader(data)));
+    }
+}
+exports.QueryClientImpl = QueryClientImpl;
+if (_m0.util.Long !== long_1.default) {
+    _m0.util.Long = long_1.default;
+    _m0.configure();
+}
+function isSet(value) {
+    return value !== null && value !== undefined;
+}
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/service.d.ts b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/service.d.ts
new file mode 100644
index 0000000..2fb4f22
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/service.d.ts
@@ -0,0 +1,29 @@
+import { MsgCreateBidResponse, MsgCloseBidResponse, MsgCreateBid, MsgCloseBid } from "./bid";
+import { MsgWithdrawLeaseResponse, MsgCreateLeaseResponse, MsgCloseLeaseResponse, MsgWithdrawLease, MsgCreateLease, MsgCloseLease } from "./lease";
+export declare const protobufPackage = "akash.market.v1beta4";
+/** Msg defines the market Msg service */
+export interface Msg {
+    /** CreateBid defines a method to create a bid given proper inputs. */
+    CreateBid(request: MsgCreateBid): Promise<MsgCreateBidResponse>;
+    /** CloseBid defines a method to close a bid given proper inputs. */
+    CloseBid(request: MsgCloseBid): Promise<MsgCloseBidResponse>;
+    /** WithdrawLease withdraws accrued funds from the lease payment */
+    WithdrawLease(request: MsgWithdrawLease): Promise<MsgWithdrawLeaseResponse>;
+    /** CreateLease creates a new lease */
+    CreateLease(request: MsgCreateLease): Promise<MsgCreateLeaseResponse>;
+    /** CloseLease defines a method to close an order given proper inputs. */
+    CloseLease(request: MsgCloseLease): Promise<MsgCloseLeaseResponse>;
+}
+export declare class MsgClientImpl implements Msg {
+    private readonly rpc;
+    constructor(rpc: Rpc);
+    CreateBid(request: MsgCreateBid): Promise<MsgCreateBidResponse>;
+    CloseBid(request: MsgCloseBid): Promise<MsgCloseBidResponse>;
+    WithdrawLease(request: MsgWithdrawLease): Promise<MsgWithdrawLeaseResponse>;
+    CreateLease(request: MsgCreateLease): Promise<MsgCreateLeaseResponse>;
+    CloseLease(request: MsgCloseLease): Promise<MsgCloseLeaseResponse>;
+}
+interface Rpc {
+    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
+}
+export {};
diff --git a/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/service.js b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/service.js
new file mode 100644
index 0000000..de7dd74
--- /dev/null
+++ b/node_modules/@akashnetwork/akashjs/build/protobuf/akash/market/v1beta4/service.js
@@ -0,0 +1,67 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MsgClientImpl = exports.protobufPackage = void 0;
+/* eslint-disable */
+const bid_1 = require("./bid");
+const lease_1 = require("./lease");
+const _m0 = __importStar(require("protobufjs/minimal"));
+exports.protobufPackage = "akash.market.v1beta4";
+class MsgClientImpl {
+    constructor(rpc) {
+        this.rpc = rpc;
+        this.CreateBid = this.CreateBid.bind(this);
+        this.CloseBid = this.CloseBid.bind(this);
+        this.WithdrawLease = this.WithdrawLease.bind(this);
+        this.CreateLease = this.CreateLease.bind(this);
+        this.CloseLease = this.CloseLease.bind(this);
+    }
+    CreateBid(request) {
+        const data = bid_1.MsgCreateBid.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Msg", "CreateBid", data);
+        return promise.then((data) => bid_1.MsgCreateBidResponse.decode(new _m0.Reader(data)));
+    }
+    CloseBid(request) {
+        const data = bid_1.MsgCloseBid.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Msg", "CloseBid", data);
+        return promise.then((data) => bid_1.MsgCloseBidResponse.decode(new _m0.Reader(data)));
+    }
+    WithdrawLease(request) {
+        const data = lease_1.MsgWithdrawLease.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Msg", "WithdrawLease", data);
+        return promise.then((data) => lease_1.MsgWithdrawLeaseResponse.decode(new _m0.Reader(data)));
+    }
+    CreateLease(request) {
+        const data = lease_1.MsgCreateLease.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Msg", "CreateLease", data);
+        return promise.then((data) => lease_1.MsgCreateLeaseResponse.decode(new _m0.Reader(data)));
+    }
+    CloseLease(request) {
+        const data = lease_1.MsgCloseLease.encode(request).finish();
+        const promise = this.rpc.request("akash.market.v1beta4.Msg", "CloseLease", data);
+        return promise.then((data) => lease_1.MsgCloseLeaseResponse.decode(new _m0.Reader(data)));
+    }
+}
+exports.MsgClientImpl = MsgClientImpl;
